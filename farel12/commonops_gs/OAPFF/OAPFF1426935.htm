<!DOCTYPE html ><html lang="en">
   <head><style> table.customlayout {table-layout:auto;} </style>
      <meta charset="utf-8">
      
      <title>Formula Components (Chapter 3) R12</title>
      <meta content="all" name="robots" >
      <meta content="yes" name="mos_crawl" >
      <meta content="Using Fast Formula" name="dcterms.title">
      <meta content="Using Fast Formula" name="doctitle">
      <meta content="E74171-05" name="dcterms.identifier">
      <meta content="E67730-01" name="partno">
      <meta content="OAPFF" name="dcterms.isVersionOf" >
      <meta content="Fusion Publishing Server, UAE Print Staging" name="generator" >
      <meta content="Tue Dec 19 11:49:16 PST 2017" name="dcterms.created">
      <meta name="relnum" content="Release 12">
      <meta name="rel_num" content="Release 12">
      <meta name="keywords" content="fast formulas; variables; functions; literals; operators; expressions; conditions; comments; calls to other formulas; input
      statements; return statements; assignment statements;">
      <link type="text/html" title="Home" href="../../index.html" rel="Start" >
      <link type="text/html" title="Copyright" href="../dcommon/html/cpyr.htm" rel="Copyright">
      <script src="../dcommon/js/headfoot.js" type="application/javascript"></script>
      <script src="../nav/js/doccd.js" type="application/javascript"></script>
      <link type="text/html" title="Contents" href="toc.htm" rel="Contents">
      <link type="text/html" title="Previous" href="OAPFF1426934.htm
      " rel="Prev">
      <link type="text/html" title="Next" href="OAPFF1426936.htm
      " rel="Next">
      <link type="application/pdf" title="PDF version" href="OAPFF.pdf" rel="alternate">
      <link type="application/epub+zip" title="ePub version" href="OAPFF.epub" rel="alternate">
      <link rel="schema.dcterms" href="http://purl.org/dc/terms/">
      <meta content="IE=edge" http-equiv="X-UA-Compatible">
      <meta content="width=device-width, initial-scale=1.0, maximum-scale=1" name="viewport">
      <link type="text/css" href="../dcommon/css/header.css" rel="stylesheet">
      <link type="text/css" href="../dcommon/css/footer.css" rel="stylesheet">
      <link type="text/css" href="../dcommon/css/fonts.css" rel="stylesheet">
      <link type="text/css" href="../dcommon/css/foundation.css" rel="stylesheet">
      <link type="text/css" href="../dcommon/css/codemirror.css" rel="stylesheet">
      <link type="text/css" href="../nav/css/html5.css" rel="stylesheet">
      <link type="text/css" href="../dcommon/css/respond-480-tablet.css" rel="stylesheet">
      <link type="text/css" href="../dcommon/css/respond-768-laptop.css" rel="stylesheet">
      <link type="text/css" href="../dcommon/css/respond-1140-deskop.css" rel="stylesheet">
      <script src="../dcommon/js/modernizr.js" type="application/javascript"></script>
      <script src="../dcommon/js/codemirror.js" type="application/javascript"></script>
      <script src="../dcommon/js/jquery.js" type="application/javascript"></script>
      <script src="../dcommon/js/foundation.min.js" type="application/javascript"></script>
      <script src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-53addf516e0e58a5" type="application/javascript"></script>
      <script src="../dcommon/js/jqfns.js" type="application/javascript"></script>
      <script src="../dcommon/js/ohc-inline-videos.js" type="application/javascript"></script>
      <meta class="foundation-mq-topbar">
      <link type="text/css" href="../dcommon/css/Fusionapps_022016.css" rel="stylesheet">
      
      <meta name="description" content="When you're developing a formula, you must understand formula language, the rules that the application imposes on the formula,
      and the calculation requirements."><script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
   <body><a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header></header>
      <div class="row" id="CONTENT">
         <div class="IND large-9 medium-8 columns">
            <div id="EXTRATOC"><span class="italic">This guide also applies to on-premises implementations</span></div><span id="PAGE" style="display:none;">6/13</span><a name="BEGIN" id="BEGIN"></a><div id="OAPFF1426935" class="fusiondoc">
               <h1 class="chapter"><span class="chapter-number">3</span>Formula Components
               </h1>
               <p class="chapterintro">This chapter contains the following:</p>
               <ul class="intro">
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#OAPFF176281">Using Formula Components: Explained</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#OAPFF176385">Formula Statements: Explained</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#OAPFF176943">Naming Variables: Explained</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#OAPFF176768">Database Items: Explained</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#OAPFF1077303">Generating Flexfield Database Items: Explained</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#OAPFF1081776">Generating Flexfield Database Items: Worked Example</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#OAPFF176522">Formula Operators: Explained</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#OAPFF176192">Literals: Explained</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#OAPFF176921">Formula Variable Data Types: How They're Determined</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#OAPFF327884">Array Variables: Explained</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#OAPFF328792">Formula Contexts: Explained</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#OAPFF295010">Working Storage Area: Explained</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#OAPFF294842">Calling a Formula from a Formula: Explained</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#OAPFF1143064">Calling a Formula from a Formula: Examples</a></p>
                  </li>
               </ul>
               
               <div class="sect1" id="OAPFF176281">
                  <h2>Using Formula Components: Explained</h2>
                  
                  
                  
                  
                  
                  <p>When you're developing a formula, you must
                     understand formula language, the rules that the application imposes on the formula,
                     and the calculation requirements.
                  </p>
                  
                  
                  
                  <p> Create formulas using these components:</p>
                  
                  <ul>
                     
                     <li>
                        <p>Assignment statements</p>
                     </li>
                     
                     <li>
                        <p>Return statements</p>
                     </li>
                     
                     <li>
                        <p>Variables</p>
                     </li>
                     
                     <li>
                        <p>Input statements</p>
                     </li>
                     
                     <li>
                        <p>Expressions</p>
                     </li>
                     
                     <li>
                        <p>Conditions</p>
                     </li>
                     
                     <li>
                        <p>Comments</p>
                     </li>
                     
                  </ul>
                  
                  <div class="infobox-"><span class="notep1">Note: </span>
                     Other topics explain additional components you can
                     use in formulas. These include literals, database items, working storage
                     area, calls to other formulas, functions, and operators.
                     
                  </div>
                  
                  <p>To illustrate how each component is used in a formula,
                     suppose you wanted to calculate the pay value for the WAGEelement by multiplying
                     the number of hours an employee works each week by the hourly rate.
                     The formula can be written as follows:
                  </p>
                  <pre><code>WAGE = HOURS_WORKED * HOURLY_RATE
RETURN WAGE<br></code></pre>
                  
                  <div class="sect2" id="OAPFF176274">
                     <h3 class="topictitle">Assignment Statements</h3>
                     
                     <p>An assignment statement assigns a value to the <code>WAGE</code> element.
                     </p>
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF324485">
                     <h3 class="topictitle">Return Statements</h3>
                     
                     <p>A return statement passes the <code>WAGE</code> value back to the payroll run. You can use a return statement to
                        stop the formula execution without passing back any values.
                     </p>
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF324486">
                     <h3 class="topictitle">Variables</h3>
                     
                     <p>There are three classes of variables: </p>
                     
                     
                     <ul>
                        
                        <li>
                           <p>Input variables appear in INPUTS
                              statements and bring values into a formula.
                           </p>
                        </li>
                        
                        <li>
                           <p>Output variables appear in RETURN
                              statements and return values from a formula. A variable can be both
                              an input and output.
                           </p>
                        </li>
                        
                        <li>
                           <p>Local variables are only used
                              within one formula.
                           </p>
                        </li>
                        
                     </ul>
                     
                     <p>You can change a local variable within the formula
                        by assigning a value to it using an assignment statement. To calculate
                        the <code>WAGE</code> value, the formula needs to
                        get the value for the <code>HOURS_WORKED</code>variable.
                     </p>
                     
                     <p>You can use local variables to store data in a formula.
                        You might want to hold data temporarily while you perform some other
                        calculations, or pass data back to the application. Below is an example
                        showing the use of an <code>ANNUAL_LEAVE</code> variable.
                     </p>
                     <pre><code>/* Formula: Annual Leave Formula */
IF YEARS_SERVICE &gt;= 10
THEN
ANNUAL_LEAVE = 25
ELSE
ANNUAL_LEAVE = 20 + FLOOR (YEARS_SERVICE/2)
RETURN ANNUAL_LEAVE<br></code></pre>
                     
                     </div>
                  
                  <div class="sect2" id="OAPFF324487">
                     <h3 class="topictitle">Input Statements</h3>
                     
                     <p>You can use <code>HOURS_WORKED</code> as an input value of the <code>WAGE</code> element.
                        To pass the element input values to the formula during processing,
                        define an input statement as follows:
                     </p>
                     
                     <pre><code>INPUTS ARE HOURS_WORKED
WAGE = HOURS_WORKED * HOURLY_RATE
RETURN WAGE<br></code></pre>
                     <div class="infobox-"><span class="notep1">Note: </span>
                        This is a payroll application example. The name used
                        in the input statement must be the same as the name of the element
                        input value. Multiple words must be joined by underscores. Other input
                        statements that have nothing to do with elements would have their
                        own rules for formula input variables. In this example, the <code>HOURS_WORKED</code> input variable is numeric. If
                        the input variable is not numeric, you must specify the type. For
                        example, 
                        <pre><code>INPUTS ARE START_DATE (DATE)<br></code></pre>
                        </div>
                     
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF324488">
                     <h3 class="topictitle">Expressions</h3>
                     
                     <p>Each function or calculation is one expression. You
                        can nest expressions to create more complex calculations. You can
                        use brackets to control the order in which calculations are performed.
                     </p>
                     
                     
                     <p>The formula evaluates expressions within brackets
                        first. Within nested brackets, evaluation proceeds from the least
                        inclusive set to the most inclusive set. If you don't use brackets,
                        the following hierarchal order of execution is implied: multiplication
                        and division then addition and subtraction.
                     </p>
                     
                     <p>Expressions combine constants and variables with
                        operators (+, -, *, /), array methods, and functions to return a value
                        of a certain data type. For example, the expression (3 + 2) returns
                        a value of 5, and is a <code>NUMBER</code> data type.
                        The format of an expression is:
                     </p>
                     <pre><code>SUBEXPRESSION [operator SUBEXPRESSION ...]<br></code></pre>
                     <p>You can combine a number of sub-expressions into a
                        single expression. For example, you can combine the sub-expressions
                        (3 + 2) and <code>MONTHS_BETWEEN</code>(start_date,
                        end_date) into a single expression as follows: 
                     </p>
                     <pre><code>(3 + 2) + MONTHS_BETWEEN(start_date, end_date)<br></code></pre>
                     <p>You can also use expressions inside functions, such
                        as:
                     </p>
                     <pre><code>salary = GREATEST(minimum_wage, (hourly_rate * hours_worked))<br></code></pre>
                     <p>Operands in an expression are usually of the same
                        data type which is the data type of the expression as a whole.  For
                        example, in the following expression all the operands are numeric
                        and the expression itself is numeric:
                     </p>
                     <pre><code>GREATEST(MINIMUM_WAGE, (HOURLY_RATE * HOURS_WORKED)) + BONUS<br></code></pre>
                     <p><code>BONUS</code> is the operand
                        for the above expression. The return value is <code>GREATEST</code>. The arguments for <code>GREATEST</code> are separate expressions.
                     </p>
                     
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF324489">
                     <h3 class="topictitle">Conditions</h3>
                     
                     <p>You can use conditions to process expressions based
                        on whether a certain condition occurs. For example,
                     </p>
                     
                     <pre><code>TRAINING_ALLOWANCE = 0 
IF (AGE &lt; 20) THEN
TRAINING_ALLOWANCE = 30<br></code></pre>
                     <p>This formula checks if the condition (AGE &lt; 20)
                        is true or false. If it's true, the formula processes the statement
                        that follows the word <code>THEN</code>. If the
                        condition isn't true, the formula ignores this statement.
                     </p>
                     
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF176280">
                     <h3 class="topictitle">Comments</h3>
                     
                     <p>Use comments to explain all or part of a formula.
                        Also, you can change some formula lines into comments until they are
                        ready to be used. Comments are designated by the comment delimiters
                        of /* and */. Anything written inside these delimiters is a comment.
                        You can place comments anywhere within a formula. The beginning of
                        a formula should contain the following comments:
                     </p>
                     
                     
                     <ul>
                        
                        <li>
                           <p>The formula title and a short purpose
                              statement.
                           </p>
                        </li>
                        
                        <li>
                           <p>A description of the formula inputs.</p>
                           
                        </li>
                        
                        <li>
                           <p>A list of variables and literals
                              that may require updating.
                           </p>
                        </li>
                        
                        <li>
                           <p>An explanation of the formula's calculation.</p>
                           
                        </li>
                        
                        <li>
                           <p>The dates of any modifications, the
                              name of the person modifying the formula, and the reason for the change.
                           </p>
                           
                        </li>
                        
                     </ul>
                     
                     <div class="infobox-"><span class="notep1">Note: </span>
                        Do not put a comment within a comment. This causes
                        a syntax error when the formula is compiled.
                        
                     </div>
                     
                     
                  </div>
                  
                  
                  <p class="relatedlinks">Related Topics</p>
                  <ul>
                     <li>
                        <p><a href="OAPFF1426936.htm#OAPFF312503">Formula Functions: Explained</a></p>
                     </li>
                  </ul>
                  
               </div>
               
               <div class="sect1" id="OAPFF176385">
                  <h2>Formula Statements: Explained</h2>
                  
                  
                  
                  
                  
                  <p>You use formula statements to provide instructions
                     that you want your formula to carry out. When working with statements, it's important to have
                     knowledge of the different statement types, the required order, and
                     how to group statements.
                  </p>
                  
                  
                  <div class="sect2" id="OAPFF176378">
                     <h3 class="topictitle">Statement Types</h3>
                     
                     <p>The table below describes the various statements that
                        you can use in your formulas to provide instructions.
                     </p>
                     
                     
                     <div class="simpletable-margin">
                        <table class="customlayout" summary="Types of statements">
                           
                           
                           <tr class="header">
                              
                              <th scope="col">
                                 Statement
                                 
                              </th>
                              
                              <th scope="col">
                                 Statement Form
                                 
                              </th>
                              
                              <th scope="col">
                                 Description and Example
                                 
                              </th>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>ALIAS</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p><code>ALIAS</code> name1 AS name2
                                 </p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>Provides a different name for a database item or
                                    global value. Sometimes the database item names provided by the application
                                    are too long to conveniently use in a formula. 
                                 </p>
                                 
                                 <p>Use the ALIAS statement to shorten the name of a
                                    database item. Once the ALIAS is created, use it instead of the database
                                    item name. Using an alias is more efficient than assigning the database
                                    item to a local variable with a short name.
                                 </p>
                                 <pre><code>ALIAS OVERTIME_QUALIFYING_LENGTH_OF_SERVICE AS OT_QLS<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>ASSIGNMENT</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>variable = expression</p>
                                 
                                 <p>array[index] = expression</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>Assigns an expression value to a variable or an array
                                    variable at an index position. A formula evaluates the expression
                                    on the right hand side of the statement. It places its result in the
                                    variable you name on the left hand side. The left side of an assignment
                                    statement must always be a local variable because a formula can only
                                    change the value of local variables. 
                                 </p>
                                 
                                 <p>Within a CHANGE_CONTEXTS statement, assign values
                                    to contexts only. Outside a CHANGE_CONTEXTS statement, assign values
                                    to input, output, and local variables only.
                                 </p>
                                 <pre><code>RATE = HOURLY_RATE + 14
WAGE = HOURS_WORKED * RATE<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>CHANGE_CONTEXTS</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>(context1 = expression1 [,context2 = expression2 ]
                                    ...
                                 </p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>Changes one or more contexts within a formula. Within
                                    the CHANGE_CONTEXTS statement, use <code>ASSIGNMENT</code> statements to assign the new values.
                                 </p>
                                 <pre><code>CHANGE_CONTEXTS(AREA1 = TAX_REPORTING_UNIT_INCOME_TAX_JURISDICTION_GEOGRAPHY_ID)
(
  CHANGE_CONTEXTS(DEDUCTION_TYPE = 'SBJ_TO_REGULAR_TAX')
  (
    L_TAXATION_METHOD = 'NONE'
    EXECUTE('TAXABILITY_RULE_EXISTS')
    IF GET_OUTPUT('TR_EXISTS', 'N') = 'Y' THEN
      L_TAXATION_METHOD = 'REGULAR_TAX'
  ) /* DEDUCTION_TYPE context change undone here. */
) /* AREA1 context change undone here. */<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>DEFAULT</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p><code>DEFAULT FOR</code> variable
                                    IS literal
                                 </p>
                                 
                                 <p><code>DEFAULT_DATA_VALUE FOR</code> variable IS literal
                                 </p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>The DEFAULT FOR statement  provides a value that
                                    the formula uses for a formula input or database item if:
                                 </p>
                                 
                                 <ul>
                                    
                                    <li>
                                       <p>The input doesn't provide a value.</p>
                                       
                                    </li>
                                    
                                    <li>
                                       <p>The database item isn't found</p>
                                       
                                    </li>
                                    
                                    <li>
                                       <p>The value of a non-array database
                                          item is NULL
                                       </p>
                                    </li>
                                    
                                 </ul>
                                 
                                 <p>The DEFAULT_DATA_VALUE FOR statement provides a value
                                    for an array database item where individual data values are NULL. 
                                 </p>
                                 
                                 <p>Some database items are defined to require a default
                                    value because they could return no data or NULL values from the database.
                                 </p>
                                 <pre><code>DEFAULT FOR HOURLY_RATE IS 3.00
INPUTS ARE HOURLY_RATE
X = HOURS_WORKED * HOURLY_RATE<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>EXIT</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p><code>EXIT</code></p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>Immediately exits from the enclosing <code>WHILE</code> loop. You can't use the <code>EXIT</code> statement outside of a <code>WHILE</code> loop.
                                 </p>
                                 <pre><code>FOUND = -1 /* -1 is not a valid index for A. */
I = A.FIRST(-1)
WHILE (A.EXISTS(I)) LOOP
(
  /* EXIT-clause for early exit. */
  IF A[I] = KEY THEN
  (
    FOUND = I
    /* Exit the loop. */
    EXIT;
  )
  I = A.NEXT(I,-1)
)<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>FORMULA CALLING</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p><code>SET_INPUT</code>(input  [,value])
                                 </p>
                                 
                                 <p><code>EXECUTE</code>(formula)
                                 </p>
                                 
                                 <p>The formula <code>RATE_FORMULA</code> is called to get a value for <code>HOURLY_RATE. RATE_FORMULA</code>.
                                 </p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>Calls a formula from another formula.</p>
                                 
                                 <p>For example, formulas can call a small formula that
                                    performs a common calculation. Use this approach to avoid writing
                                    long formulas.
                                 </p>
                                 <pre><code>SET_INPUT('UNIT','Hourly')
EXECUTE('RATE_FORMULA')
HOURLY_RATE = GET_OUTPUT('RATE',0.0)
WAGE = HOURS_WORKED * HOURLY_RATE
RETURN WAGE<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>IF</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p><code>IF</code> condition <code>THEN</code> statements
                                 </p>
                                 
                                 <p><code> IF</code> condition <code>THEN</code> statements <code>ELSE</code> statements
                                 </p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>Executes one or more statements if a condition evaluates
                                    as true. Use the <code>IF ELSE</code> statement
                                    to specify a set of statements to execute if the condition evaluates
                                    to false.
                                 </p>
                                 <pre><code>IF (AGE &lt; 20) THEN
  TRAINING_ALLOWANCE = 30
ELSETRAINING_ALLOWANCE = 40<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>INPUT</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p><code>INPUTS ARE</code> input1 [,
                                    input2] ...
                                 </p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>Lists the input variables for the formula. There is
                                    only one <code>INPUT</code> statement in a formula.
                                 </p>
                                 <pre><code>INPUTS ARE HOURS_WORKED
WAGE = HOURS_WORKED * HOURLY_RATE
RETURN WAGE<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>RETURN</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p><code>RETURN</code> [ output1 ] [,output2]
                                    ...
                                 </p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>Causes a formula to stop executing immediately. For
                                    its value to be returned to the caller, you must enter a formula output
                                    variable in the <code>RETURN</code> statement that
                                    stopped the formula. 
                                 </p>
                                 
                                 <p>You can enter multiple return statements in a formula.</p>
                                 <pre><code>INPUTS ARE HOURS_WORKED
IF HOURS_WORKED &lt;= 10 THEN(
  RETURN
  /* This is ignored. */
  BONUS = 10
)
/* This is executed if HOURS_WORKED &gt; 10. */
BONUS = 50
RETURN BONUS<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>WHILE</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p><code>WHILE</code> condition <code>LOOP</code> statements
                                 </p>
                                 
                                 <p>In this example, 'A' is an array variable with a numerical
                                    index. 
                                 </p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>Executes a number of statements as long as a condition
                                    evaluates to true. 
                                 </p>
                                 
                                 <p>To prevent endless looping, an error occurs if the <code>WHILE</code> statement loop performs an excessive
                                    number of iterations.
                                 </p>
                                 <pre><code>/* -1234 is not a valid index for A in this instance, so use as default. */
NI = A.FIRST(-1234)
WHILE A.EXISTS(NI) LOOP
  VA = A[NI] /* Do some processing with element at index NI. */
  NI = A.NEXT(NI,-1234) /
 Go to next index. */
)<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>WORKING STORAGE</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p><code>WSA_DELETE</code>([item]) -
                                    Deletes values from the storage area. 
                                 </p>
                                 
                                 <p><code>WSA_EXISTS</code>(item[,type])
                                    - Determine if an item exists .
                                 </p>
                                 
                                 <p><code>WSA_GET</code>(item, value)
                                    - Fetches values from the storage area.
                                 </p>
                                 
                                 <p><code>WSA_SET</code>(item, value)
                                    - Sets values from the storage area.
                                 </p>
                                 
                                 <p>In the example a number of rates are set up.</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>Stores reference data, which you can set, fetch,
                                    or delete.
                                 </p>
                                 <pre><code>/* Formula: RATE_SETTER */
WSA_SET('RATE:HOURLY1',3.5)
WSA_SET('RATE:HOURLY2',4.0)
WSA_SET('RATE:HOURLY3',4.5)
WSA_SET('RATE_FLAG','Y') /* Flag to say that the rates have been set. */<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           
                           
                        </table>
                     </div>
                     <p></p>
                     
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF176379">
                     <h3 class="topictitle">Ordering Statements</h3>
                     
                     <p>In your formulas you must place statements in the
                        following order:
                     </p>
                     
                     
                     <ol>
                        
                        <li>
                           <p>ALIAS statements, if any</p>
                        </li>
                        
                        <li>
                           <p>DEFAULT statements, if any</p>
                        </li>
                        
                        <li>
                           <p>INPUT statements, if any</p>
                        </li>
                        
                        <li>
                           <p>Other statements</p>
                        </li>
                        
                     </ol>
                     
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF176380">
                     <h3 class="topictitle">Grouping Statements</h3>
                     
                     <p>If you want to group more than one statement under
                        IF/THEN statements, ELSE clauses, WHILE loops, or CHANGE_CONTEXTS,
                        enclose the group of statements within brackets. In the absence of
                        brackets, the preceding statement only applies to the first statement.
                     </p>
                     
                     
                     <p>Correct example:</p>
                     <pre><code>I = A.FIRST
WHILE (A.EXISTS(I)) LOOP
(
  A[I] = I
  I = A.NEXT(I,-1)
)<br></code></pre>
                     <p>Incorrect example:</p>
                     <pre><code>I = A.FIRST
WHILE (A.EXISTS(I)) LOOP
  A[I] = I
  I = A.NEXT(I,-1) /* This is not executed as part of the loop. */<br></code></pre>
                     
                     </div>
                  
                  
                  
               </div>
               
               <div class="sect1" id="OAPFF176943">
                  <h2>Naming Variables: Explained</h2>
                  
                  
                  
                  
                  
                  <p>When you add variables to your formulas there
                     are two acceptable naming schemes. In addition, it's important to
                     avoid using reserved words as variable names.
                  </p>
                  
                  
                  <div class="sect2" id="OAPFF1286399">
                     <h3 class="topictitle">Naming Schemes</h3>
                     
                     
                     <p>Use one of these naming schemes:</p>
                     
                     
                     
                     <ul>
                        
                        <li>
                           <p>Variable names comprise one or
                              more words, joined by underscores. The words must each start with
                              a letter and can be followed by a combination of letters, and digits.
                           </p>
                           
                        </li>
                        
                        <li>
                           <p>Variable names begin and end with
                              double quotes (''). Between the quotes, you can use any printable
                              characters, such as ''This is a quoted variable name''. Please note
                              that any word consisting of only digits could be mistaken for numbers.
                           </p>
                           
                        </li>
                        
                     </ul>
                     
                     <p>Formulas aren't case sensitive. For example, the variable named EMPLOYEE_NAME
                        is the same as the variable employee_name.
                     </p>
                     
                     <div class="infobox-tip"><span class="notep1">Tip: </span>
                        The maximum length of a variable name is 255 characters.
                        
                     </div>
                     
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF1286400">
                     <h3 class="topictitle">Reserved Words</h3>
                     
                     
                     <p>You must not use the following reserved words
                        as the names of variables:
                     </p>
                     
                     
                     
                     <div class="simpletable-margin">
                        <table class="customlayout" summary="Reserved words table">
                           
                           
                           <tr class="header">
                              
                              <th scope="col">
                                 Source of Reserved Words 
                                 
                              </th>
                              
                              <th scope="col">
                                 Reserved Words
                                 
                              </th>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Statements</p>
                                 
                              </th>
                              
                              <td>
                                 <pre><code>ALIAS
AND
ARE
AS
CHANGE_CONTEXTS
DEFAULT
DEFAULT_DATA_VALUE
DEFAULTED
ELSE
EXIT
FOR
IF
INPUTS
IS
LIKE
LOOP
NEED_CONTEXT
NOT
OR
RETURN
THEN
USING
WAS
WHILE
<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Array Types</p>
                                 
                              </th>
                              
                              <td>
                                 <pre><code>EMPTY_DATE_NUMBER
EMPTY_NUMBER_NUMBER
EMPTY_TEXT_NUMBER
EMPTY_DATE_TEXT
EMPTY_NUMBER_TEXT
EMPTY_TEXT_TEXT<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Formula Data Types</p>
                                 
                              </th>
                              
                              <td>
                                 <pre><code>DATE
DATE_NUMBER
DATE_TEXT
NUMBER
NUMBER_NUMBER
NUMBER_TEXT
TEXT
TEXT_NUMBER
TEXT_TEXT
<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Array Methods</p>
                                 
                              </th>
                              
                              <td>
                                 <pre><code>COUNT
DELETE
EXISTS
FIRST
LAST
NEXT
PREVIOUS
PRIOR
<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Built-in Calls</p>
                                 
                              </th>
                              
                              <td>
                                 <pre><code>CONTEXT_IS_SET
EXECUTE
GET_CONTEXT
GET_OUTPUT
IS_EXECUTABLE
SET_INPUT
WSA_DELETE
WSA_EXISTS
WSA_GET
WSA_SET<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           
                           
                        </table>
                     </div>
                     <p></p>
                     
                     
                  </div>
                  
                  
                  
               </div>
               
               <div class="sect1" id="OAPFF176768">
                  <h2>Database Items: Explained</h2>
                  
                  
                  
                  
                  
                  <p>Database items exist in the application database
                     and have computer code associated with them. The system uses this
                     code to find data. All database items are read-only variables. You
                     can't change database item values within a formula. If you attempt
                     to write a value to a database item, you will receive a compilation
                     error.
                  </p>
                  
                  
                  
                  <p>You can use database items in formulas and HCM extracts.</p>
                  
                  <p> This topic explains the following types of database
                     items:
                  </p>
                  
                  <ul>
                     
                     <li>
                        <p>Static</p>
                     </li>
                     
                     <li>
                        <p>Dynamic</p>
                     </li>
                     
                     <li>
                        <p>Array</p>
                     </li>
                     
                  </ul>
                  
                  
                  <div class="sect2" id="OAPFF176765">
                     <h3 class="topictitle">Static Database Items</h3>
                     
                     <p>Static database items are predefined. They include
                        standard types of information, such as the sex, birth date, and work
                        location of an employee. They also include data about other objects,
                        such as the start and end dates of a payroll period.
                     </p>
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF176766">
                     <h3 class="topictitle">Dynamic Database Items</h3>
                     
                     <p>The application creates dynamic database items when
                        you create the following objects. In the case of flexfields, you must
                        run the Generate Flexfield Database Items process to create the database
                        items. 
                     </p>
                     
                     
                     <div class="simpletable-margin">
                        <table class="customlayout" summary="Dynamic database items table">
                           
                           
                           <tr class="header">
                              
                              <th scope="col">
                                 Object
                                 
                              </th>
                              
                              <th scope="col">
                                 Description
                                 
                              </th>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Elements</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>The element name is the database item name prefix.</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Balances</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>The balance name followed by the balance dimension
                                    name is the database item name.
                                 </p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Formula global values</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>The global value name is the database item name.</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Input values</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>The element and input value names are the database
                                    item name prefix.
                                 </p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Flexfields</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>The Generate Flexfield Database Items process creates
                                    database items for the contexts and segments of your registered HCM
                                    flexfields.
                                 </p>
                                 
                              </td>
                              
                           </tr>
                           
                           
                           
                        </table>
                     </div>
                     <p></p>
                     
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF176767">
                     <h3 class="topictitle">Array Database Items</h3>
                     
                     <p>Array database items have an index type of NUMBER
                        with indexes starting at 1 and increasing by 1 without gaps. Here's
                        an example:
                     </p>
                     
                     <pre><code>/* 1 is the starting index for an array database item. */
I = 1
WHILE DBI.EXISTS(I) LOOP
(
  V = DBI[I] /* Do some processing with element at index I. */
  I = I + 1 /* Array database items indexes go up in steps of 1. */
)<br></code></pre>
                     <p>Use the DEFAULT_DATA_VALUE FOR statement to set a
                        default value in the case where an array database item could return
                        a NULL value for an element. There can only be one DEFAULT_DATA_VALUE
                        FOR statement for each array database item and it must appear at the
                        start of the formula. 
                     </p>
                     
                     <p>Here's an example of a DEFAULT_DATA_VALUE FOR statement:</p>
                     <pre><code>DEFAULT_DATA_VALUE FOR A IS 0
INPUTS ARE B, C<br></code></pre>
                     <p>Here's an example of an array database item usage
                        error case:
                     </p>
                     <pre><code> /* Array database item A. */
A[1] = 1
 A = B
A.DELETE(1)
A.DELETE<br></code></pre>
                     
                     </div>
                  
                  
                  
               </div>
               
               <div class="sect1" id="OAPFF1077303">
                  <h2>Generating Flexfield Database Items: Explained</h2>
                  
                  
                  
                  
                  
                  <p>You configure registered HCM flexfields to
                     add contexts and segments for your business requirements. After you
                     deploy the flexfield, you can generate database items for the flexfield
                     for use in your formulas and extracts by submitting the Generate Flexfield
                     Database Items process from the Payroll Checklist or Payroll Administration
                     work areas.
                  </p>
                  
                  
                  
                  <p>You can generate database items for the following
                     flexfields: 
                  </p>
                  
                  <ul>
                     
                     <li>
                        <p>Descriptive flexfields</p>
                     </li>
                     
                     <li>
                        <p>Extensible flexfields for single
                           and multiple row routes
                        </p>
                     </li>
                     
                     <li>
                        <p>Key flexfields</p>
                     </li>
                     
                  </ul>
                  
                  <p>The process generates database items at the enterprise
                     level only. As a best practice, when you submit the process, skip
                     the legislative data group parameter so that the process generates
                     database items for use by any legislative data group. 
                  </p>
                  
                  <p>You can determine which database items to generate
                     by specifying or skipping the flexfield and context parameters.
                  </p>
                  
                  <div class="simpletable-margin">
                     <table class="customlayout" summary="Specify or skip the flexfield&#xA;and context parameters to control which database items to generate">
                        
                        
                        <tr class="header">
                           
                           <th scope="col">
                              Flexfield Parameter
                              
                           </th>
                           
                           <th scope="col">
                              Context Parameter
                              
                           </th>
                           
                           <th scope="col">
                              Result
                              
                           </th>
                           
                        </tr>
                        
                        <tr>
                           
                           <th scope="row" class="row">
                              
                              <p>Specify parameter</p>
                              
                           </th>
                           
                           <td>
                              
                              <p>Skip parameter</p>
                              
                           </td>
                           
                           <td>
                              
                              <p>Generate database items for all the contexts and
                                 related segments for a specified flexfield
                              </p>
                              
                           </td>
                           
                        </tr>
                        
                        <tr>
                           
                           <th scope="row" class="row">
                              
                              <p>Skip parameter</p>
                              
                           </th>
                           
                           <td>
                              
                              <p>Skip parameter</p>
                              
                           </td>
                           
                           <td>
                              
                              <p>Generate database items for all registered flexfields
                                 and their contexts.
                              </p>
                              
                           </td>
                           
                        </tr>
                        
                        
                        
                     </table>
                  </div>
                  <p></p>
                  
                  <p>The process creates database item names with this
                     following structure:
                  </p>
                  <pre><code>&lt;FLEXFIELD_CODE&gt;&lt;CONTEXT_CODE&gt;&lt;SEGMENT_CODE&gt;<br></code></pre>
                  <p>When you include the database item in a formula or
                     extract, the application returns a value for the database item, based
                     on the flexfield context, for the segments column in the underlying
                     flexfield table. After you generate database items, compile any formulas
                     using these database items.
                  </p>
                  
                  <p>Periodically, you may need to update a flexfield
                     structure, for example to add a segment to capture additional data.
                     If you previously generated database items for a flexfield, submitting
                     the process deletes and regenerates the associated database items.
                     After the process regenerates the database items, be sure to compile
                     any formulas using them.
                  </p>
                  
                  
                  
                  <p class="relatedlinks">Related Topics</p>
                  <ul>
                     <li>
                        <p><a href="https://fusionhelp.oracle.com/helpPortal/faces/AtkHelpPortalMain?TopicId=96E89901A4049BF4E040D30A68811939">Flexfields: Overview</a></p>
                     </li>
                     <li>
                        <p><a href="https://fusionhelp.oracle.com/helpPortal/faces/AtkHelpPortalMain?TopicId=C11A5F07B0B768E7E040D30A688110C8">Extract Components: How They Work Together</a></p>
                     </li>
                  </ul>
                  
               </div>
               
               <div class="sect1" id="OAPFF1081776">
                  <h2>Generating Flexfield Database Items: Worked Example</h2>
                  
                  
                  
                  
                  
                  <p>This example demonstrates how to add segments
                     and contexts to a registered HCM flexfield, and how to generate database
                     items for the flexfield for later use in formulas and extracts.
                  </p>
                  
                  
                  
                  <p>The following table summarizes the key decisions
                     for this scenario.
                  </p>
                  
                  <div class="simpletable-margin">
                     <table class="customlayout" summary="Decisions about which context and segments to add&#xA;to the organization information flexfield.">
                        
                        
                        <tr class="header">
                           <th scope="col">
                              Decisions to Consider
                              
                           </th>
                           <th scope="col">
                              In this Example
                              
                           </th>
                        </tr>
                        
                        <tr>
                           
                           <th scope="row" class="row">
                              
                              <p>Which registered HCM flexfield requires database
                                 items?
                              </p>
                              
                           </th>
                           
                           <td>
                              
                              <p>Organization Information flexfield</p>
                              
                           </td>
                           
                        </tr>
                        
                        <tr>
                           
                           <th scope="row" class="row">
                              
                              <p>What is the name of the flexfield code?</p>
                              
                           </th>
                           
                           <td>
                              
                              <p>PER_ORGANIZATION_INFORMATION_EFF</p>
                              
                           </td>
                           
                        </tr>
                        
                        <tr>
                           
                           <th scope="row" class="row">
                              
                              <p>How many contexts include segments that require database
                                 items?
                              </p>
                              
                           </th>
                           
                           <td>
                              
                              <p>Two contexts: HCM_CN_PSU_TERMINATION_INFO, HRX_CN_TRU_TERMINATION_INFO</p>
                              
                           </td>
                           
                        </tr>
                        
                        <tr>
                           
                           <th scope="row" class="row">
                              
                              <p>Should I give all legislative data groups access
                                 to the generated database items for use in their formulas and extracts?
                              </p>
                              
                           </th>
                           
                           <td>
                              
                              <p>Yes</p>
                              
                           </td>
                           
                        </tr>
                        
                        
                        
                     </table>
                  </div>
                  <p></p>
                  
                  
                  <div class="sect2" id="">
                     
                     <p>In this example, Joe plans to create formulas for
                        an implementation in China based on information captured in the organization
                        information flexfield. Joe configures the flexfield to add the contexts
                        and segments. He writes a formula to calculate severance pay that
                        returns results for the leave compensation factor based on the tax
                        reporting unit.
                     </p>
                     
                  </div>
                  
                  
                  <h3 class="topictitle">Configure the Flexfield</h3>
                  
                  
                  <ol>
                     
                     <li>
                        
                        <p>In the Setup and Maintenance work area, go to the
                           Manage Extensible Flexfields task, and search for the Organization
                           Information EFF.
                        </p>
                        
                     </li>
                     
                     <li>
                        
                        <p> Click <span class="uicontrol">Edit</span>.
                        </p>
                        
                     </li>
                     
                     <li>
                        
                        <p>Click <span class="uicontrol">Manage Contexts</span>. 
                        </p>
                        
                     </li>
                     
                     <li>
                        
                        <p>Click <span class="uicontrol">Create</span> and create two contexts:  HCM_CN_TRU_TERMINATION_INFO and HRX_CN_PSU_TERMINATION_INFO.
                        </p>
                        
                     </li>
                     
                     <li>
                        
                        <p>For each context, create two segments: LEAVE_COMPENSATION_FACTOR
                           and MONTHLY_SALARY_PAID_DAYS.
                        </p>
                        
                     </li>
                     
                     <li>
                        
                        <p>Deploy the flexfield.</p>
                        
                     </li>
                     
                  </ol>
                  
                  
                  
                  <h3 class="topictitle">Submit the Generate Flexfield Database Process</h3>
                  
                  
                  <ol>
                     
                     <li>
                        
                        <p>In the Payroll Checklists or Payroll Administration
                           work area, select the <span class="uicontrol">Submit a Process or
                              Report</span> task.
                        </p>
                        
                     </li>
                     
                     <li>
                        
                        <p>Complete the following parameters:</p>
                        
                        <p></p>
                        <div class="simpletable-margin">
                           <table summary="This table lists field names (left column) and their respective values.">
                              
                              
                              <tr>
                                 
                                 <th scope="col">
                                    Page
                                    
                                 </th>
                                 
                                 <th scope="col">
                                    Parameter
                                    
                                 </th>
                                 
                                 <th scope="col">
                                    Data
                                    
                                 </th>
                                 
                              </tr>
                              
                              <tr align="left" valign="top">
                                 
                                 <th scope="row" class="row">
                                    
                                    <p>Select Flow Pattern</p>
                                    
                                 </th>
                                 
                                 <td>
                                    
                                    <p>Legislative Data Group</p>
                                    
                                 </td>
                                 
                                 <td>
                                    
                                    <p>Skip this parameter</p>
                                    
                                 </td>
                                 
                              </tr>
                              
                              <tr align="left" valign="top">
                                 
                                 <th scope="row" class="row">
                                    
                                    <p>Select Flow Pattern</p>
                                    
                                 </th>
                                 
                                 <td>
                                    
                                    <p>Process or Report</p>
                                    
                                 </td>
                                 
                                 <td>
                                    
                                    <p>Generate Flexfield Database Items</p>
                                    
                                 </td>
                                 
                              </tr>
                              
                              <tr align="left" valign="top">
                                 
                                 <th scope="row" class="row">
                                    
                                    <p>Enter Parameters</p>
                                    
                                 </th>
                                 
                                 <td>
                                    
                                    <p>Payroll Flow</p>
                                    
                                 </td>
                                 
                                 <td>
                                    
                                    <p>Organization flexfield database items</p>
                                    
                                 </td>
                                 
                              </tr>
                              
                              <tr align="left" valign="top">
                                 
                                 <th scope="row" class="row">
                                    
                                    <p>Enter Parameters</p>
                                    
                                 </th>
                                 
                                 <td>
                                    
                                    <p>Name</p>
                                    
                                 </td>
                                 
                                 <td>
                                    
                                    <p>PER_ORGANIZATION_INFORMATION_EFF</p>
                                    
                                 </td>
                                 
                              </tr>
                              
                              <tr align="left" valign="top">
                                 
                                 <th scope="row" class="row">
                                    
                                    <p>Enter Parameters</p>
                                    
                                 </th>
                                 
                                 <td>
                                    
                                    <p>Context</p>
                                    
                                 </td>
                                 
                                 <td>
                                    
                                    <p>Skip this field to generate database items for all
                                       contexts.
                                    </p>
                                    
                                 </td>
                                 
                              </tr>
                              
                              
                              
                           </table>
                        </div>
                        
                     </li>
                     
                     <li>
                        
                        <p>Click <span class="uicontrol">Next</span> and skip the Enter Interaction page.
                        </p>
                        
                     </li>
                     
                     <li>
                        
                        <p>Click <span class="uicontrol">Next</span> and skip the Schedule page.
                        </p>
                        
                     </li>
                     
                     <li>
                        
                        <p>Click <span class="uicontrol">Next</span> and review the submitted parameters on the Review page.
                        </p>
                        
                     </li>
                     
                     <li>
                        
                        <p>Click <span class="uicontrol">Submit</span> to create the payroll flow.
                        </p>
                        
                        <p>
                           
                           <p>The submitted process creates database items for
                              each context for the flexfield segments:
                           </p>
                           
                           <ul>
                              
                              <li>
                                 <p>PER_ORGANIZATION_INFORMATION_HRX_CN_TRU_TERMINATION_LEAVE_COMPENSATION_FACTOR</p>
                                 
                              </li>
                              
                              <li>
                                 <p>PER_ORGANIZATION_INFORMATION_HRX_CN_TRU_TERMINATION_MONTHLY_SALARY_PAID_DAYS</p>
                                 
                              </li>
                              
                              <li>
                                 <p>PER_ORGANIZATION_INFORMATION_HRX_CN_PSU_TERMINATION_LEAVE_COMPENSATION_FACTOR</p>
                                 
                              </li>
                              
                              <li>
                                 <p>PER_ORGANIZATION_INFORMATION_HRX_CN_PSU_TERMINATION_MONTHLY_SALARY_PAID_DAYS</p>
                                 
                              </li>
                              
                           </ul>
                           
                        </p>
                        
                     </li>
                     
                  </ol>
                  
                  
                  
                  <h3 class="topictitle">Create a Formula</h3>
                  
                  
                  <ol>
                     
                     <li>
                        
                        <p>Create a formula for calculating severance pay
                           that returns a segment for LEAVE_COMPENSATION_FACTOR, if the context
                           code is the one specified for the database item, HRX_CN_TRU_TERMINATION_INFO.
                        </p>
                        
                     </li>
                     
                  </ol>
                  
                  
                  
               </div>
               
               <div class="sect1" id="OAPFF176522">
                  <h2>Formula Operators: Explained</h2>
                  
                  
                  
                  
                  
                  <p>Formula operators are expressions that may
                     contain arithmetic operators. These operators determine how the formula
                     manipulates variables and literals. For example, the plus operator
                     (+) indicates that two items are added together.
                     You can also use operators for string concatenation.
                  </p>
                  
                  
                  
                  <div class="sect2" id="OAPFF176519">
                     <h3 class="topictitle">Types of Operators</h3>
                     
                     <p> The operator types are described in the following
                        table.
                     </p>
                     
                     
                     <div class="simpletable-margin">
                        <table class="customlayout" summary="Operator types">
                           
                           
                           <tr class="header">
                              
                              <th scope="col">
                                 Operator
                                 
                              </th>
                              
                              <th scope="col">
                                 Description
                                 
                              </th>
                              
                              <th scope="col">
                                 Example
                                 
                              </th>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>+</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Addition</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>A = B + 1</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>+</p>
                                 
                                 <p>| |</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>String concatenation</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>A = 'Hello ' + 'World' </p>
                                 
                                 <p>B = 'Hello ' || 'World'</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>-</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Subtraction</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>A = B - 1</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>-</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Unary minus</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>A = -B</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>*</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Multiplication</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>A = B * C</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>/</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Division</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>A = B / C</p>
                                 
                              </td>
                              
                           </tr>
                           
                           
                           
                        </table>
                     </div>
                     <p></p>
                     
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF176520">
                     <h3 class="topictitle">Using Operators</h3>
                     
                     <p>The arithmetic operators, subtraction, multiplication,
                        and division, can only be used with numeric operands. The addition
                        operator can be used with numeric or text operands. The operands can
                        be variables, literals, or sub-expressions. A formula error occurs if:
                     </p>
                     
                     
                     <ul>
                        
                        <li>
                           <p>The second operand of a division
                              equals zero
                           </p>
                        </li>
                        
                        <li>
                           <p>The result of multiplication is too
                              large
                           </p>
                           <p>What is too large is determined by the normal
                              limits in the database. For string concatenation, if the result is
                              longer than 255 characters, a formula error is raised.
                           </p>
                           
                        </li>
                        
                     </ul>
                     
                     <p></p>
                     
                     <p>Expressions are evaluated in order from left to right.
                        The unary minus has precedence over the other operators because it
                        applies directly to a single sub-expression. The multiplication and
                        division operators take precedence over addition and subtraction.
                        For example, the expression 1 + 2 * 3 evaluates to 7 rather than 9.
                        Brackets can be used to change precedence. For example, (1 + 2) *
                        3 evaluates to 9.
                     </p>
                     
                     
                  </div>
                  
                  
                  
               </div>
               
               <div class="sect1" id="OAPFF176192">
                  <h2>Literals: Explained</h2>
                  
                  
                  
                  
                  
                  <p>A literal is a piece of information that you
                     manipulate or use in a formula. This topic explains the four types
                     of literals: Numeric, Text, Date, and Array. 
                  </p>
                  
                  
                  <div class="sect2" id="OAPFF176188">
                     <h3 class="topictitle">Numeric Literals</h3>
                     
                     <p>When you enter numeric literals, follow these rules: </p>
                     
                     
                     <ul>
                        
                        <li>
                           <p>Don't use quotes to enclose the
                              literal.
                           </p>
                        </li>
                        
                        <li>
                           <p>Don't use commas or spaces in the
                              number.
                           </p>
                        </li>
                        
                        <li>
                           <p>Don't use exponents and floating
                              point scientific notations.
                           </p>
                        </li>
                        
                        <li>
                           <p>You can enter numbers that have
                              a decimal component after a decimal point.
                           </p>
                        </li>
                        
                        <li>
                           <p>To enter a negative number precede
                              it with a minus sign (-).
                           </p>
                        </li>
                        
                     </ul>
                     
                     
                     
                     <p>Examples of numeric literals are:</p>
                     
                     <ul>
                        
                        <li>
                           <p>63</p>
                        </li>
                        
                        <li>
                           <p>3.55</p>
                        </li>
                        
                        <li>
                           <p>-2.3</p>
                        </li>
                        
                        <li>
                           <p>-.033</p>
                        </li>
                        
                        <li>
                           <p>-.2</p>
                        </li>
                        
                        <li>
                           <p>10000</p>
                        </li>
                        
                     </ul>
                     
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF176189">
                     <h3 class="topictitle">Text Literals</h3>
                     
                     <p>When you enter text literals, enclose them in single
                        quotes. Text literals may contain spaces. To enter a single quote
                        character in a text constant, enter two single quotes (for example,
                        'P O''Donnell'). Note that this is not the same as the double quote
                        ('').
                     </p>
                     
                     
                     <p>Examples of text literals are:</p>
                     
                     <ul>
                        
                        <li>
                           <p>'J. Smith'</p>
                        </li>
                        
                        <li>
                           <p>'1234'</p>
                        </li>
                        
                        <li>
                           <p>'Manager'</p>
                        </li>
                        
                        <li>
                           <p>'12 Union Road'</p>
                        </li>
                        
                        <li>
                           <p>'The Bonus this year is 23%'</p>
                        </li>
                        
                     </ul>
                     
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF176190">
                     <h3 class="topictitle">Date Literals</h3>
                     
                     <p>When you enter a date literal, enclose dates in single
                        quotes and follow immediately with the word date, in brackets.
                     </p>
                     
                     
                     <p>Use one of the following formats:</p>
                     
                     <ul>
                        
                        <li>
                           <p>YYYY-MM-DD''T'' HH:MI:SS.FFF''Z''</p>
                           
                        </li>
                        
                        <li>
                           <p>YYYY-MM-DD HH24:MI:SS</p>
                        </li>
                        
                        <li>
                           <p>DD-MON-YYYY</p>
                        </li>
                        
                     </ul>
                     
                     <div class="infobox-tip"><span class="notep1">Tip: </span>
                        Use one of the first two formats if you want to compile
                        the formula under different language settings.
                        
                     </div>
                     
                     <p>Examples of date literals are:</p>
                     
                     <ul>
                        
                        <li>
                           <p>'2010-11-04T00:00:00.000Z' (DATE)</p>
                           
                        </li>
                        
                        <li>
                           <p>'1989-03-12 00:00:00' (DATE)</p>
                        </li>
                        
                        <li>
                           <p>'12-MAR-1989' (DATE)</p>
                        </li>
                        
                     </ul>
                     
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF176191">
                     <h3 class="topictitle">Array Literals</h3>
                     
                     <p>An array holds multiple values that the formula can
                        access using the corresponding index values. You define array literals
                        only for an empty array of each type.
                     </p>
                     
                     
                     <p>The array types are:</p>
                     
                     <ul>
                        
                        <li>
                           <p>Array of date values indexed by a
                              numeric index (EMPTY_DATE_NUMBER)
                           </p>
                        </li>
                        
                        <li>
                           <p>Array of number values indexed by
                              a numeric index (EMPTY_NUMBER_NUMBER)
                           </p>
                        </li>
                        
                        <li>
                           <p>Array of text values indexed by a
                              numeric index (EMPTY_TEXT_NUMBER)
                           </p>
                        </li>
                        
                        <li>
                           <p>Array of date values indexed by a
                              text index (EMPTY_DATE_TEXT)
                           </p>
                        </li>
                        
                        <li>
                           <p>Array of numeric values indexed by
                              a text index (EMPTY_NUMBER_TEXT)
                           </p>
                        </li>
                        
                        <li>
                           <p>Array of text values indexed by a
                              text index (EMPTY_TEXT_TEXT)
                           </p>
                        </li>
                        
                     </ul>
                     
                     
                  </div>
                  
                  
               </div>
               
               <div class="sect1" id="OAPFF176921">
                  <h2>Formula Variable Data Types: How They're Determined</h2>
                  
                  
                  
                  
                  
                  
                  <p>Variable data type can be numeric, text or
                     date. The data type determines the type of information the variable
                     holds. You don't have to specify the variable type. Formulas determine the type from
                     how you use the variable. For example, if you set a variable to 'J.
                     Smith', the formula interprets it as a text variable.
                  </p>
                  
                  <div class="infobox-caution"><span class="notep1">Caution: </span>
                     Inconsistent or incorrect use of variables, such
                     as trying to add a number to a text string, causes formula compilation
                     errors.
                     
                  </div>
                  
                  
                  
                  <div class="sect2" id="OAPFF176923">
                     <h3 class="topictitle">How Formulas Determine Variable Data Types</h3>
                     
                     <p>Formulas process the rules that determine the variable
                        data type in the following order:
                     </p>
                     
                     <ol>
                        
                        <li>
                           <p>The variable can be an input you
                              name in the input statement. For example:
                           </p>
                           <pre><code>INPUTS ARE SALARY_AMOUNT,
START_DATE (DATE),
FREQUENCY (TEXT)<br></code></pre>
                           <p>If you don't specify the variable data type in the
                              statement, the formula assumes it's a number.
                           </p>
                           
                           <p>The variable data type can be determined from a DEFAULT_FOR
                              statement such as:
                           </p>
                           <pre><code>DEFAULT FOR B IS 0 /* B is a NUMBER variable. */<br></code></pre>
                           <p>In the case of array database items, the index type
                              and the value type can be determined from a DEFAULT_DATA_VALUE FOR
                              statement:
                           </p>
                           <pre><code>DEFAULT_DATA_VALUE FOR A IS EMPTY_NUMBER_NUMBER /* A is a NUMBER_NUMBER array variable. */<br></code></pre>
                           <p>The variable data type can be determined from a DEFAULT_DATA_VALUE
                              FOR statement such as:
                           </p>
                           <pre><code>DEFAULT_DATA_VALUE FOR A IS EMPTY_NUMBER_NUMBER /* A is a NUMBER_NUMBER array variable. */<br></code></pre>
                           <p>In the case of array database items, the type can
                              be determined from a DEFAULT FOR statement:
                           </p>
                           <pre><code>DEFAULT FOR B IS 0 /* B is a NUMBER variable. */<br></code></pre>
                           </li>
                        
                        <li>
                           <p>The formula searches the list of
                              database items. If the variable is in the list, the data type is known.
                           </p>
                           
                        </li>
                        
                        <li>
                           <p>If the variable appears in a context
                              handling statement, then the formula searches the list of contexts.
                              If the variable is in the list, then the formula knows the data type,
                              otherwise it raises an error.
                           </p>
                        </li>
                        
                        <li>
                           <p>If the variable isn't a database
                              item or a context, then the formula treats it as a local variable
                              and determines the data type by the way you use the variable. For
                              example:
                           </p>
                           <pre><code>A = 'abc' /* A is a TEXT variable. */<br></code></pre>
                           </li>
                        
                     </ol>
                     
                  </div>
                  
                  
                  <p class="relatedlinks">Related Topics</p>
                  <ul>
                     <li>
                        <p><a href="OAPFF1426934.htm#OAPFF293733">Formula Compilation Errors: Explained</a></p>
                     </li>
                  </ul>
                  
               </div>
               
               <div class="sect1" id="OAPFF327884">
                  <h2>Array Variables: Explained</h2>
                  
                  
                  
                  
                  
                  <p>You can use arrays for input, output, and
                     local formula variables. These array variables can hold date, number, or text
                     values. Arrays are similar to PL/SQL index-by tables.
                  </p>
                  
                  
                  
                  <div class="infobox-caution"><span class="notep1">Caution: </span>
                     Large arrays and excessive use of arrays will result
                     in excessive memory consumption.
                     
                  </div>
                  
                  
                  <div class="sect2" id="OAPFF1287132">
                     <h3 class="topictitle">Array Indexes</h3>
                     
                     
                     <p>Here are some aspects of array indexes that
                        you should be aware of:
                     </p>
                     
                     
                     
                     <ul>
                        
                        <li>
                           <p>The index types are either text
                              or number.
                           </p>
                        </li>
                        
                        <li>
                           <p>Text indexes are upper case unique.</p>
                           
                        </li>
                        
                        <li>
                           <p>Gaps in index value sequences are
                              permitted.
                           </p>
                        </li>
                        
                        <li>
                           <p>Number indexes are truncated to
                              remove any fractional part.
                           </p>
                        </li>
                        
                        <li>
                           <p>You may iterate an array in an
                              index either forwards or backwards.
                           </p>
                        </li>
                        
                     </ul>
                     
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF1287133">
                     <h3 class="topictitle">Array Data Types</h3>
                     
                     
                     <p>Array types are specified as DATA_TYPE_INDEX_TYPE.
                        Here are the following types:
                     </p>
                     
                     
                     
                     <ul>
                        
                        <li>
                           <p>NUMBER_NUMBER </p>
                        </li>
                        
                        <li>
                           <p>NUMBER_TEXT</p>
                        </li>
                        
                        <li>
                           <p>DATE_NUMBER</p>
                        </li>
                        
                        <li>
                           <p>DATE_TEXT</p>
                        </li>
                        
                        <li>
                           <p>TEXT_NUMBER</p>
                        </li>
                        
                        <li>
                           <p>TEXT_TEXT</p>
                        </li>
                        
                     </ul>
                     
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF1287134">
                     <h3 class="topictitle">Rules for Using Arrays</h3>
                     
                     
                     <p>Formula functions can't return arrays or
                        take array parameters. Contexts can't be array types. An attempt to
                        reference an array value at a nonexistent index causes a formula execution
                        error. However, an attempt to delete a value at a nonexistent index
                        doesn't cause an error.
                     </p>
                     
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF327881">
                     <h3 class="topictitle">Array Methods</h3>
                     
                     <p>Array methods provide a way to get the first and last
                        indexes and to get the next or prior index. These methods return the
                        index data type. You can specify a default value for these methods,
                        if the required indexes don't exist. A method is also provided to
                        test the existence of an index.
                     </p>
                     
                     
                     <div class="infobox-"><span class="notep1">Note: </span>
                        The array method syntax doesn't work directly with
                        the array literal values. For example, you can't use a construct such
                        as EMPTY_DATE_NUMBER.COUNT.
                        
                     </div>
                     
                     
                     
                     <p>The following table provides examples of each array
                        method:
                     </p>
                     
                     <div class="simpletable-margin">
                        <table class="customlayout" summary="Array syntax">
                           
                           
                           <tr class="header">
                              
                              <th scope="col">
                                 Array Method
                                 
                              </th>
                              
                              <th scope="col">
                                 Description
                                 
                              </th>
                              
                              <th scope="col">
                                 Usage Example
                                 
                              </th>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>&lt;name&gt; [ &lt;index value&gt; ]</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Get the value for an index.</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>V = A[1]</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>&lt;name&gt; . FIRST( &lt;default value&gt; )</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Get the first index for an array. The default value
                                    is returned if the array is empty.
                                 </p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>I = A.FIRST(-1)</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>&lt;name&gt; . LAST( &lt;default value&gt; )</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Get the last index for an array.</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>L = B.LAST(' ')</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>&lt;name&gt; . EXISTS( &lt;index value&gt; )</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Conditional checking if a value exists at an index.
                                    The default value is returned if the array is empty.
                                 </p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>IF A.EXISTS(1) THEN</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>&lt;name&gt; . NEXT( &lt;index value&gt; , &lt;default index
                                    value&gt; )
                                 </p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Get the next index given an index position. The default
                                    value is returned if there is no next index. 
                                 </p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>N = A.NEXT(1)</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>&lt;name&gt; . PRIOR( &lt;index value&gt; , &lt;default
                                    index value&gt; )
                                 </p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Get the prior index given the index position. The
                                    default value is returned if there is no prior index.
                                 </p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>P = B.PRIOR('Two') </p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>&lt;name&gt; , COUNT</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Numeric method to count the array elements.</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>C = A.COUNT</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>&lt;name , DELETE( &lt;index value&gt; )</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Delete the element at an index position.</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>B.DELETE('three')</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>&lt;name&gt; , DELETE()</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Delete all elements.</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>B.DELETE()</p>
                                 
                              </td>
                              
                           </tr>
                           
                           
                           
                        </table>
                     </div>
                     <p></p>
                     
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF327882">
                     <h3 class="topictitle">Iterating Through an Array</h3>
                     
                     <p>In the following example, A is an array variable with a NUMBER index. -1234 is known to be an
                        invalid index for A so it's used as a default
                        value when the FIRST and NEXT calls can't find an index.
                     </p>
                     
                     <pre><code>/* -1234 is not a valid index for A in this instance, so use as default. */
NI = A.FIRST(-1234)
WHILE A.EXISTS(NI) LOOP
(
  VA = A[NI] /* Do some processing with element at index NI. */
  NI = A.NEXT(NI,-1234) /* Go to next index. */
)<br></code></pre>
                     <p>The following example does the same thing for array
                        variable B with a TEXT index. 
                     </p>
                     <pre><code>/* 'No Index' is not a valid index for A in this instance, so use as default. */
TI = B.FIRST('No Index')
WHILE B.EXISTS(TI) LOOP
(
  VB = B[TI] /* Do some processing with element at index TI. */
  TI = B.NEXT(TI, 'No Index') /* Go to next index. */
)
The following example iterates backwards from through an array C with a NUMBER inde.
/* -1234 is not a valid index for C in this instance, so use as default. */
NI = C.LAST(-1234)
WHILE C.EXISTS(NI) LOOP
(
  VC = C[NI] /* Do some processing with element at index NI. */
  NI = C.PRIOR(NI,-1234) /* Go to prior index. */<br></code></pre>
                     
                     </div>
                  
                  
                  
               </div>
               
               <div class="sect1" id="OAPFF328792">
                  <h2>Formula Contexts: Explained</h2>
                  
                  
                  
                  
                  
                  <p>Formulas run within an application-specific execution context,
                     which determines the context variables that are available to the formula.
                     Context values act as SQL bind values when the formula fetches database
                     item values from the database. Formulas can also pass context values
                     into formula function calls.
                  </p>
                  
                  
                  
                  <p>Examples of contexts are: </p>
                  
                  <ul>
                     
                     <li>
                        <p><code>EFFECTIVE_DATE</code> for the effective date the formula is running
                        </p>
                     </li>
                     
                     <li>
                        <p><code>PAYROLL_ID</code> for the running payroll
                        </p>
                     </li>
                     
                     <li>
                        <p><code>PERSON_ID</code> for identifying the person for who the formula is processing or
                           evaluating
                        </p>
                     </li>
                     
                  </ul>
                  
                  
                  <div class="sect2" id="OAPFF328789">
                     <h3 class="topictitle">Context Value Setting</h3>
                     
                     <p>The application code calling a formula usually sets
                        all the context values. For some complex applications, such as the
                        payroll run, the code only sets the contexts necessary to meet general
                        processing requirements.
                     </p>
                     
                     
                     <p>For payroll formulas:</p>
                     
                     <ul>
                        
                        <li>
                           <p>A payroll run sets contexts for
                              the legislative data group, date earned, the payroll being processed,
                              the payroll relationship, payroll actions, and the person being processed.
                           </p>
                           
                        </li>
                        
                        <li>
                           <p>Additional, country-specific contexts
                              are available. For example, the jurisdiction area and tax code context
                              values are country-specific.
                           </p>
                        </li>
                        
                     </ul>
                     
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF328790">
                     <h3 class="topictitle">Formula Context-Handling Statements</h3>
                     
                     <p>If you use a variable in a context handling statement,
                        the formula searches the list of contexts. The variable must appear
                        in the contexts list; otherwise the formula displays an error. The
                        data type is held with the context list entry.
                     </p>
                     
                     
                     <p>Formula context handling statements are described
                        below.
                     </p>
                     
                     <div class="simpletable-margin">
                        <table class="customlayout" summary="Formula context handling statements&#xA;table">
                           
                           
                           <tr class="header">
                              
                              <th scope="col">
                                 Statement
                                 
                              </th>
                              
                              <th scope="col">
                                 Purpose of the Statement
                                 
                              </th>
                              
                              <th scope="col">
                                 Example
                                 
                              </th>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>CHANGE_CONTEXTS(assignment
                                       [,...])</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Changes context values within the context changing
                                    block. Inside this block, formula function calls, database items,
                                    and called formulas use the new context values. Outside the block,
                                    the formula uses the original values. 
                                 </p>
                                 
                                 <p>You can nest context changing blocks to apply context
                                    changes in stages.
                                 </p>
                                 
                              </td>
                              
                              <td>
                                 <pre><code>/*
 * Nested Context changes: DBI1 depends upon SOURCE_ID and SOURCE_TEXT. */
CHANGE_CONTEXTS(SOURCE_TEXT = 'A')
(
  /* SOURCE_TEXT = 'A' */
  X = DBI1
 
  /* Nesting used to change Contexts in stages. */
  CHANGE_CONTEXT(SOURCE_ID = 2)
  (
    /* SOURCE_TEXT = 'A',
SOURCE_ID  = 2 */
    Y = DBI1
    
    /* Overriding a Context change. */
    CHANGE_CONTEXTS(SOURCE_TEXT = 'B',SOURCE_ID = 3)
    (
      /* SOURCE_TEXT = 'B', SOURCE_ID  = 3 */
      Z = DBI1
       )
)<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>CONTEXT_IS_SET(context)</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Tests whether or not a context value is set.</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>The following code tests whether or not the AREA3
                                    context is set. 
                                 </p>
                                 <pre><code>IF CONTEXT_IS_SET(AREA3) THEN<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>GET_CONTEXT(context, default
                                       value)</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Returns a context's value if the context is set,
                                    otherwise it returns the default value specified in its second argument.
                                 </p>
                                 
                              </td>
                              
                              <td>
                                 <pre><code>/* AREA1 is a context of type TEXT. */
AREA1_VALUE = GET_CONTEXT(AREA1,' ')<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           
                           
                        </table>
                     </div>
                     <p></p>
                     
                     
                  </div>
                  
                  
               </div>
               
               <div class="sect1" id="OAPFF295010">
                  <h2>Working Storage Area: Explained</h2>
                  
                  
                  
                  
                  
                  <p>The working storage area is a mechanism for
                     storing global values
                     across formulas. Using the different call methods, you can test whether or not an
                     item exists in the storage area, delete an item, set the value for
                     an item, and get a value for an item. Access the values by name. The
                     names are case-independent.
                  </p>
                  
                  
                  
                  <p>The working storage area methods are described in
                     the below table.
                  </p>
                  
                  <div class="simpletable-margin">
                     <table class="customlayout" summary="Working storage area methods">
                        
                        
                        <tr class="header">
                           
                           <th scope="col">
                              Method
                              
                           </th>
                           
                           <th scope="col">
                              Description
                              
                           </th>
                           
                        </tr>
                        
                        <tr>
                           
                           <th scope="row" class="row">
                              
                              <p><code>WSA_EXISTS(item [, type])</code></p>
                              
                           </th>
                           
                           <td>
                              
                              <p>Test whether or not the item called <code>item</code> exists in the storage area. If <code>type</code> is specified, then the item must be of the same type.
                                 The valid values for type are one of the strings: 
                              </p>
                              
                              <ul>
                                 
                                 <li>
                                    <p><code>DATE</code></p>
                                 </li>
                                 
                                 <li>
                                    <p><code>DATE_NUMBER</code></p>
                                 </li>
                                 
                                 <li>
                                    <p><code>DATE_TEXT</code></p>
                                 </li>
                                 
                                 <li>
                                    <p><code>NUMBER</code></p>
                                 </li>
                                 
                                 <li>
                                    <p><code>NUMBER_NUMBER</code></p>
                                 </li>
                                 
                                 <li>
                                    <p><code>NUMBER_TEXT</code></p>
                                 </li>
                                 
                                 <li>
                                    <p><code>TEXT</code></p>
                                 </li>
                                 
                                 <li>
                                    <p><code>TEXT_NUMBER</code>,
                                    </p>
                                 </li>
                                 
                                 <li>
                                    <p><code>TEXT_TEXT</code></p>
                                 </li>
                                 
                              </ul>
                              
                           </td>
                           
                        </tr>
                        
                        <tr>
                           
                           <th scope="row" class="row">
                              
                              <p><code>WSA_DELETE([item])</code></p>
                              
                           </th>
                           
                           <td>
                              
                              <p>Delete the item called <code>item</code>. If you don't specify a name then all storage area data is deleted.
                              </p>
                              
                           </td>
                           
                        </tr>
                        
                        <tr>
                           
                           <th scope="row" class="row">
                              
                              <p><code>WSA_SET(item, value)</code></p>
                              
                           </th>
                           
                           <td>
                              
                              <p>Set the value for the item called <code>item</code>. Any existing item of the same name is overwritten.
                              </p>
                              
                           </td>
                           
                        </tr>
                        
                        <tr>
                           
                           <th scope="row" class="row">
                              
                              <p><code>WSA_GET(item, default-value)</code></p>
                              
                           </th>
                           
                           <td>
                              
                              <p>Retrieve a value for the item called <code>item</code>. If there's no item called <code>item</code>, then the method returns the default value.
                                 The data type of <code>default-value</code> is the
                                 expected data type for <code>item</code>.
                              </p>
                              
                           </td>
                           
                        </tr>
                        
                        
                        
                     </table>
                  </div>
                  <p></p>
                  
                  
                  
               </div>
               
               <div class="sect1" id="OAPFF294842">
                  <h2>Calling a Formula from a Formula: Explained</h2>
                  
                  
                  
                  
                  
                  <p>Another formula can call a formula. This
                     enables some modularity in formula organization. The called formula
                     name, and any formula input or output names, are specified as <code>TEXT</code> values. The names are case-independent.
                     There are two alternative approaches to calling a formula: using a
                     single call, or separate calls.
                  </p>
                  
                  
                  
                  <p>Consider the following aspects:</p>
                  
                  <ul>
                     
                     <li>
                        <p>Validation of the Called Formula</p>
                        
                     </li>
                     
                     <li>
                        <p>Passing Contexts</p>
                     </li>
                     
                     <li>
                        <p>Alternative Methods to Call a Formula</p>
                        
                        <ul>
                           
                           <li>
                              <p>Using Separate Calls</p>
                           </li>
                           
                           <li>
                              <p>Using a Single Self-Contained Call</p>
                              
                           </li>
                           
                        </ul>
                        
                     </li>
                     
                     <li>
                        <p>Use Cases to Compare Methods</p>
                     </li>
                     
                  </ul>
                  
                  
                  <div class="sect2" id="OAPFF1163764">
                     <h3 class="topictitle">Validation of the Called Formula</h3>
                     
                     <p>When the formula runs, it checks to ensure the called
                        formula can be run, and whether the specified input and output data
                        types are correct. You can use the <code>IS_EXECUTABLE</code> call to determine whether an executable formula with a specified
                        name exists. You must compile the formula to make it available for
                        the specified legislative data group. Also, it must be valid on the
                        effective date that the calling formula runs. Payroll code imposes
                        extra restrictions based on formula type combinations.
                     </p>
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF1163765">
                     <h3 class="topictitle">Passing Contexts</h3>
                     
                     <p>Context values are inherited from the calling formula.
                        You can also set or unset the context values explicitly in the nested
                        formula call.
                     </p>
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF1163766">
                     <h3 class="topictitle">Alternative Methods to Call a Formula</h3>
                     
                     <p>There are two ways to call a formula from a formula:</p>
                     
                     
                     <ul>
                        
                        <li>
                           <p>Using a series of separate calls</p>
                           
                        </li>
                        
                        <li>
                           <p>Using a single self-contained call</p>
                           
                        </li>
                        
                     </ul>
                     
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF1163767">
                     <h3 class="topictitle">Using Separate Calls</h3>
                     
                     <p>You can use three separate calls as follows:</p>
                     
                     
                     <ol>
                        
                        <li>
                           <p>Set the Inputs</p>
                           <p>Use a <code>SET_INPUT</code> call for each formula
                              input and context that you need to explicitly set for the formula
                              call. You don't need to specify all formula inputs and contexts. To
                              explicitly unset a context values, use the <code>SET_INPUT</code> call without passing the optional value parameter.  Any extra inputs
                              specified in <code>SET_INPUT</code> calls are ignored.
                              xx Use a <code>SET_INPUT</code> call for each formula
                              input and context that you need to explicitly set for the formula
                              call. You don't need to specify all formula inputs and contexts. To
                              explicitly unset a context value, use the <code>SET_INPUT</code> call without passing the optional value parameter. Any extra inputs
                              specified in <code>SET_INPUT</code> calls are ignored.
                           </p>
                           
                        </li>
                        
                        <li>
                           <p>Call the Formula</p>
                           <p>Use an <code>EXECUTE</code> call to call a formula.
                           </p>
                           
                        </li>
                        
                        <li>
                           <p>Get the Formula Outputs</p>
                           <p>Use one or more <code>GET_OUTPUT</code> calls to fetch outputs from the last formula call.
                           </p>
                           
                        </li>
                        
                     </ol>
                     
                     <p>When the formula runs, it will show an execution
                        error if:
                     </p>
                     
                     <ul>
                        
                        <li>
                           <p>The called formula is not executable.</p>
                           
                        </li>
                        
                        <li>
                           <p>The called formula is already running.</p>
                           
                        </li>
                        
                        <li>
                           <p>The data type of an input variable
                              (specified using SET_INPUT) or an output variable (specified using
                              GET_OUTPUT) doesn't match its actual data type within the called formula.
                           </p>
                           
                        </li>
                        
                     </ul>
                     
                     <p>The following table summarizes the methods for calling
                        a formula using separate calls.
                     </p>
                     
                     <div class="simpletable-margin">
                        <table class="customlayout" summary="Methods for calling a formula from a formula">
                           
                           
                           <tr class="header">
                              
                              <th scope="col">
                                 Method
                                 
                              </th>
                              
                              <th scope="col">
                                 Description
                                 
                              </th>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>SET_INPUT(input  [,value])</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>The value parameter is optional. If it's provided,
                                    the specified input is set to this value. If it's not provided, the
                                    input is passed as unset to the formula. The data type of the value
                                    is the expected data type for the input.
                                 </p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>EXECUTE(formula)</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Executes the called <code>formula</code>.
                                 </p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>GET_OUTPUT(output, default-value)</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Gets the value of the output parameter after calling
                                    a formula. If there's no formula output called 'output' or it's not
                                    set, the formula returns the value specified in the default value
                                    parameter. The data type of default value is the expected data type
                                    for output.
                                 </p>
                                 
                              </td>
                              
                           </tr>
                           
                           
                           
                        </table>
                     </div>
                     <p></p>
                     
                     <div class="infobox-note"><span class="notep1">Note: </span>
                        Formula inputs set using <code>SET_INPUT</code> persist as long as no <code>EXECUTE</code> or <code>GET_OUTPUT</code> calls are made. Output values from
                        a called formula persist as long as no <code>SET_INPUT</code> or new <code>EXECUTE</code> calls are made. When
                        the calling formula exits, the process removes any saved input or
                        output values.
                        
                     </div>
                     
                     
                  </div>
                  
                  <div class="sect2" id="OAPFF1163768">
                     <h3 class="topictitle">Using a Single Self-Contained Call</h3>
                     
                     <p>The end result with this approach is the same as
                        using separate calls except that:
                     </p>
                     
                     
                     <ul>
                        
                        <li>
                           <p>Input values are cleared at the
                              start so that prior <code>SET_INPUT</code> call
                              values are not used.
                           </p>
                        </li>
                        
                        <li>
                           <p>Outputs are discarded at the end
                              so that subsequent <code>GET_OUTPUT</code> calls
                              just return the default values.
                           </p>
                        </li>
                        
                     </ul>
                     
                     <p>Use the <code>CALL_FORMULA</code> method as follows:
                     </p>
                     <pre><code>CALL_FORMULA(formula, [set statement, get statement])<br></code></pre>
                     <p> A <code>SET</code> statement is
                        a <code>SET_INPUT</code> call. A <code>GET </code>statement assigns a <code>GET_OUTPUT</code> call result to a variable in the calling formula. The execution
                        order is:
                     </p>
                     
                     <ol>
                        
                        <li>
                           <p>SET_INPUT calls</p>
                        </li>
                        
                        <li>
                           <p>EXECUTE call</p>
                        </li>
                        
                        <li>
                           <p>GET_OUTPUT assignments</p>
                        </li>
                        
                     </ol>
                     
                     <p>The compiler generates code to execute in this order
                        even if SET and GET statements are interspersed.
                     </p>
                     
                     
                  </div>
                  
                  
                  
               </div>
               
               <div class="sect1" id="OAPFF1143064">
                  <h2>Calling a Formula from a Formula: Examples</h2>
                  
                  
                  
                  
                  
                  
                  <p>These examples illustrate how to call a formula
                     from another formula using two methods: a series of separate calls
                     or a single self-contained call. The examples include two versions
                     of a wage formula, and a table comparing the two methods using a series
                     of use cases.
                  </p>
                  
                  <p>The first two examples show different versions of
                     the wage formula. The following points apply to both examples:
                  </p>
                  
                  <ul>
                     
                     <li>
                        <p>The formula calls RATE_FORMULA
                           to get a value for HOURLY_RATE.
                        </p>
                     </li>
                     
                     <li>
                        <p>The RATE_FORMULA has a text input
                           called UNIT.
                        </p>
                     </li>
                     
                     <li>
                        <p>The formula call sets the UNIT
                           input to 'Hourly'.
                        </p>
                     </li>
                     
                     <li>
                        <p>The RATE_FORMULA returns the rate
                           in the output variable called RATE.
                        </p>
                     </li>
                     
                     <li>
                        <p>The GET_OUTPUT call returns 0.00
                           if the RATE_FORMULA doesn't return RATE.
                        </p>
                     </li>
                     
                  </ul>
                  
                  
                  
                  <div class="sect2" id="OAPFF1143043"><h3 class="OracleScenario">Wage Formula Using Separate Calls</h3>
                     <p>This example illustrates a formula call from separate
                        calls.
                     </p><pre><code>SET_INPUT('UNIT', 'Hourly')
EXECUTE('RATE_FORMULA')
HOURLY_RATE = GET_OUTPUT('RATE',0.0)
WAGE = HOURS_WORKED * HOURLY_RATE
RETURN WAGE<br></code></pre></div>
                  
                  <div class="sect2" id="OAPFF1143044"><h3 class="OracleScenario">Wage Formula Using a Self-Contained Call</h3>
                     <p>This example illustrates a formula called from a
                        self-contained call.
                     </p><pre><code>CALL_FORMULA 
('RATE_FORMULA','Hourly' &gt; 'UNIT' 
/* SET_INPUT('UNIT', 'Hourly') */
,HOURLY_RATE &lt; 'RATE' DEFAULT 0.0 
/* HOURLY_RATE = GET_OUTPUT('RATE',0.0) */
)
WAGE = HOURS_WORKED * HOURLY_RATE
RETURN RATE<br></code></pre></div>
                  
                  <div class="sect2" id="OAPFF1286012"><h3 class="OracleScenario">Sample Expressions to Compare Methods</h3>
                     <p>The following table provides sample expressions you
                        use in the two methods to:
                     </p>
                     <ul>
                        
                        <li>
                           <p>Call a formula</p>
                        </li>
                        
                        <li>
                           <p>Set inputs and context values</p>
                           
                        </li>
                        
                        <li>
                           <p>Unset context values</p>
                        </li>
                        
                        <li>
                           <p>Get output values into a variable
                              or array variable
                           </p>
                        </li>
                        
                        <li>
                           <p>Provide a default output value </p>
                           
                        </li>
                        
                     </ul>
                     <div class="infobox-"><span class="notep1">Note: </span>
                        SET_INPUT or &gt; statements have no effect if the calling
                        formula has no formula input or context of the same name.
                        
                     </div>
                     <div class="simpletable-margin">
                        <table class="customlayout" summary="Use Cases">
                           
                           
                           <tr class="header">
                              
                              <th scope="col">
                                 Use Case
                                 
                              </th>
                              
                              <th scope="col">
                                 Using Separate Calls
                                 
                              </th>
                              
                              <th scope="col">
                                 Using a Self-Contained Call
                                 
                              </th>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Execute a formula where the formula <code>GET_RATES</code> is executed
                                 </p>
                                 
                              </th>
                              
                              <td>
                                 <pre><code>EXECUTE('GET_RATES')<br></code></pre>
                                 </td>
                              
                              <td>
                                 
                                 <p>Use within a <code>CALL_FORMULA</code> statement
                                 </p>
                                 <pre><code>'GET_RATES'<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Set an input value in the called formula where you
                                    round up EXTRA_HOURS to 2 decimal places and set the input OVERTIME
                                    in the called formula.
                                 </p>
                                 
                                 <p>The called formula should contain the statement:</p>
                                 <pre><code>INPUTS ARE OVERTIME<br></code></pre>
                                 </th>
                              
                              <td>
                                 <pre><code>SET_INPUT
('OVERTIME'
,ROUNDUP(EXTRA_HOURS,2)
)
<br></code></pre>
                                 </td>
                              
                              <td>
                                 
                                 <p>Use within a <code>CALL_FORMULA</code> statement
                                 </p>
                                 <pre><code>ROUNDUP(EXTRA_HOURS,2) &gt;'OVERTIME'<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Leave a formula input value unset inside the called
                                    formula, where <code>RATE</code> is not a formula
                                    context.
                                 </p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>A SET_INPUTS statement is not required, but you can
                                    use the following:
                                 </p>
                                 <pre><code>SET_INPUT('RATE')<br></code></pre>
                                 </td>
                              
                              <td>
                                 
                                 <p>A SET statement is not required, but you can use
                                    the following: 
                                 </p>
                                 <pre><code>&gt; 'RATE'<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Inherit a context value from the called formula.</p>
                                 
                                 <p>For example, both the calling and called formula
                                    support the AREA1 context. The called formula inherits the AREA1 context
                                    value from the calling formula.
                                 </p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>No statements are required to do this.</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>No statements are required to do this.</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Set a context value inside a called formula, where
                                    the called formula supports the AREA1 context and AREA1 has to be
                                    set to 'London' in the called formula. 
                                 </p>
                                 
                              </th>
                              
                              <td>
                                 <pre><code>SET_INPUT
('AREA1'
,'London'
)
<br></code></pre>
                                 </td>
                              
                              <td>
                                 <pre><code>'London' &gt; 'AREA1'<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Call a formula with an unset context value, where
                                    the called formula supports the AREA1 context and AREA1 has to be
                                    unset in the called formula.
                                 </p>
                                 
                              </th>
                              
                              <td>
                                 <pre><code>SET_INPUT('AREA1')<br></code></pre>
                                 </td>
                              
                              <td>
                                 <pre><code>&gt; 'AREA1'<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Get a formula output from the called formula.</p>
                                 
                                 <p>Get BONUS_RATE output value into the RATE variable
                                    using the default value 0.0 if the BONUS_RATE output does not exist
                                    or was not set. 
                                 </p>
                                 
                              </th>
                              
                              <td>
                                 <pre><code>RATE = 
GET_OUTPUT
('BONUS_RATE'
,0.0
)
<br></code></pre>
                                 </td>
                              
                              <td>
                                 <pre><code>RATE &lt;'BONUS_RATE' DEFAULT 0.0<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Get a formula output from a called formula into an
                                    array
                                 </p>
                                 
                                 <p>Get the BONUS_RATE output value into the RATES array
                                    variable at index position 'BONUS'. Use the default value 0.0 if the
                                    BONUS_RATE output doesn't exist or wasn't set.
                                 </p>
                                 
                              </th>
                              
                              <td>
                                 <pre><code>RATES['BONUS'] = 
GET_OUTPUT
('BONUS_RATE'
,0.0
)
<br></code></pre>
                                 </td>
                              
                              <td>
                                 <pre><code>RATES['BONUS'] &lt;'BONUS_RATE' DEFAULT 0.0<br></code></pre>
                                 </td>
                              
                           </tr>
                           
                           
                           
                        </table>
                     </div>
                     <p></p>
                  </div>
                  
                  
               </div>
            </div>
         </div>
      </div>
      <footer></footer>
      <noscript>
         <p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
      </noscript>
      <!-- Start SiteCatalyst code -->
      <script type="application/javascript" src="//www.oracleimg.com/us/assets/metrics/ora_docs.js"></script>
      <!-- End SiteCatalyst code -->
      </body>
</html>
