<!DOCTYPE html ><html lang="en">
   <head><style> table.customlayout {table-layout:auto;} </style>
      <meta charset="utf-8">
      
      <title>Loading Setup Objects (Chapter 8) R12</title>
      <meta content="all" name="robots" >
      <meta content="yes" name="mos_crawl" >
      <meta content="Integrating with Oracle HCM Cloud" name="dcterms.title">
      <meta content="Integrating with Oracle HCM Cloud" name="doctitle">
      <meta content="E73304-07" name="dcterms.identifier">
      <meta content="E67730-01" name="partno">
      <meta content="FAIHM" name="dcterms.isVersionOf" >
      <meta content="Fusion Publishing Server, UAE Print Staging" name="generator" >
      <meta content="Fri Oct 20 01:29:16 PDT 2017" name="dcterms.created">
      <meta name="relnum" content="Release 12">
      <meta name="rel_num" content="Release 12">
      <meta name="keywords" content="HCM Data Loader;">
      <link type="text/html" title="Home" href="../../index.html" rel="Start" >
      <link type="text/html" title="Copyright" href="../dcommon/html/cpyr.htm" rel="Copyright">
      <script src="../dcommon/js/headfoot.js" type="application/javascript"></script>
      <script src="../nav/js/doccd.js" type="application/javascript"></script>
      <link type="text/html" title="Contents" href="toc.htm" rel="Contents">
      <link type="text/html" title="Previous" href="FAIHM2137992.htm
      " rel="Prev">
      <link type="text/html" title="Next" href="FAIHM2197527.htm
      " rel="Next">
      <link type="application/pdf" title="PDF version" href="FAIHM.pdf" rel="alternate">
      <link type="application/epub+zip" title="ePub version" href="FAIHM.epub" rel="alternate">
      <link rel="schema.dcterms" href="http://purl.org/dc/terms/">
      <meta content="IE=edge" http-equiv="X-UA-Compatible">
      <meta content="width=device-width, initial-scale=1.0, maximum-scale=1" name="viewport">
      <link type="text/css" href="../dcommon/css/header.css" rel="stylesheet">
      <link type="text/css" href="../dcommon/css/footer.css" rel="stylesheet">
      <link type="text/css" href="../dcommon/css/fonts.css" rel="stylesheet">
      <link type="text/css" href="../dcommon/css/foundation.css" rel="stylesheet">
      <link type="text/css" href="../dcommon/css/codemirror.css" rel="stylesheet">
      <link type="text/css" href="../nav/css/html5.css" rel="stylesheet">
      <link type="text/css" href="../dcommon/css/respond-480-tablet.css" rel="stylesheet">
      <link type="text/css" href="../dcommon/css/respond-768-laptop.css" rel="stylesheet">
      <link type="text/css" href="../dcommon/css/respond-1140-deskop.css" rel="stylesheet">
      <script src="../dcommon/js/modernizr.js" type="application/javascript"></script>
      <script src="../dcommon/js/codemirror.js" type="application/javascript"></script>
      <script src="../dcommon/js/jquery.js" type="application/javascript"></script>
      <script src="../dcommon/js/foundation.min.js" type="application/javascript"></script>
      <script src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-53addf516e0e58a5" type="application/javascript"></script>
      <script src="../dcommon/js/jqfns.js" type="application/javascript"></script>
      <script src="../dcommon/js/ohc-inline-videos.js" type="application/javascript"></script>
      <meta class="foundation-mq-topbar">
      <link type="text/css" href="../dcommon/css/Fusionapps_022016.css" rel="stylesheet">
      
      <meta name="description" content=""><script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
   <body><a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header></header>
      <div class="row" id="CONTENT">
         <div class="IND large-9 medium-8 columns">
            <div id="EXTRATOC"><span class="italic">This guide also applies to on-premises implementations</span></div><span id="PAGE" style="display:none;">11/34</span><a name="BEGIN" id="BEGIN"></a><div id="FAIHM2261419" class="fusiondoc">
               <h1 class="chapter"><span class="chapter-number">8</span>Loading Setup Objects
               </h1>
               <p class="chapterintro">This chapter contains the following:</p>
               <ul class="intro">
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#FAIHM2254476">Loading Actions: Examples</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#FAIHM2254575">Loading Action Reasons: Examples</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#FAIHM2345851">Loading Banks: Explained</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#FAIHM2348008">Loading Bank Branches: Explained</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#FAIHM2417253">Loading External Bank Accounts: Explained</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#FAIHM2260556">Loading Calendar Events: Explained</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#FAIHM2370745">Loading Checklist Templates: Explained</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#FAIHM2521652">Loading Document Types: Explained</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#FAIHM2520926">Loading Document Types: Examples</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#FAIHM2260150">Loading Extended Lookup Codes: Examples</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#FAIHM2253438">Loading Legislative Data Groups: Examples</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#FAIHM2254076">Loading Name Formats: Explained</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#FAIHM2253359">Loading Person Types: Examples</a></p>
                  </li>
                  <li>
                     <p class="guidemap_sub_chapter"><a href="#FAIHM2260002">Loading Resource Exceptions: Examples</a></p>
                  </li>
               </ul>
               
               <div class="sect1" id="FAIHM2254476">
                  <h2>Loading Actions: Examples</h2>
                  
                  
                  
                  
                  
                  
                  <p>Actions classify changes to data such as
                     employment and compensation records. When you create or update a record,
                     the action value specifies the reason for the change. For example,
                     the associated action for an assignment change may be promotion
                     or transfer. Action reasons, which are optional, provide additional
                     information about a change. The action reason usage component of an
                     action specifies the relationship between an action and an existing
                     action reason. This topic shows how to load actions and their action
                     reason usage components using HCM Data Loader.
                  </p>
                  
                  
                  
                  <div class="sect2" id="FAIHM2254468"><h3 class="OracleScenario">Creating Actions</h3>
                     <p>This example Actions.dat file creates an action and
                        associates it with an action reason usage. Both components are identified
                        by source keys.
                     </p><pre><code>METADATA|Actions|SourceSystemOwner|SourceSystemId|ActionCode|ActionName|ActionTypeCode|StartDate|EndDate
MERGE|Actions|VISION|VISION_ACT_PROM|VISION_PROM|Vision Promotion|EMPL_PROMOTION|2000/01/01|
METADATA|ActionReasonUsage|SourceSystemOwner|SourceSystemId|ActionCodeId(SourceSystemId)|ActionReasonId(SourceSystemId)|StartDate|EndDate
MERGE|ActionReasonUsage|VISION|VISION_PROM_PERF|VISION_ACT_PROM|VISION_PERF|2000/01/01|<br></code></pre></div>
                  
                  <div class="sect2" id="FAIHM2254500"><h3 class="OracleScenario">Loading Translated Action Names and Descriptions</h3>
                     <p>Supply action names and descriptions in the language
                        of the user who's loading them. You supply an ActionsTranslation.dat
                        file to translate action names and descriptions into other enabled
                        languages once the actions exist. This example ActionsTranslation.dat
                        file translates an action name and its description. The action is
                        identified by its source key.
                     </p><pre><code>METADATA|ActionsTranslation|SourceSystemOwner|SourceSystemId|Language|ActionName|Description
MERGE|ActionsTranslation|VISION|ACT_VISION_PROM|FR|Performance|Changement est survenu en raison de la performance des employes<br></code></pre></div>
                  
                  <div class="sect2" id="FAIHM2254493"><h3 class="OracleScenario">Deleting Actions</h3>
                     <p>You can delete actions and action reason usages using
                        HCM Data Loader. This example Actions.dat file deletes an action reason
                        usage. It must include a reference to the action to which the action
                        reason usage belongs. The action reason usage is identified by its
                        source key.
                     </p><pre><code>METADATA|ActionReasonUsage|SourceSystemOwner|SourceSystemId|ActionId(SourceSystemId)
DELETE|ActionReasonUsage|VISION|ARU_VISION_PROM_PERF|ACT_VISION_PROM<br></code></pre><div class="infobox-"><span class="notep1">Note: </span>
                        You can't use user keys when deleting individual
                        action reason usages.
                        
                     </div>
                     <p>When you delete an action, you must also delete its
                        action reason usages explicitly. This example Actions.dat file deletes
                        an action and its action reason usages. All DELETE instructions are
                        in the same file. The action and its action reason usages are identified
                        by source keys.
                     </p><pre><code>METADATA|Actions|SourceSystemOwner|SourceSystemId
DELETE|Actions|VISION|ACT_VISION_PROM
METADATA|ActionReasonUsage|SourceSystemOwner|SourceSystemId|ActionId(SourceSystemId)
DELETE|ActionReasonUsage|VISION|ARU_VISION_PROM_PERF|ACT_VISION_PROM<br></code></pre></div>
                  
                  
                  
               </div>
               
               <div class="sect1" id="FAIHM2254575">
                  <h2>Loading Action Reasons: Examples</h2>
                  
                  
                  
                  
                  
                  
                  <p>Action reasons, which are optional, provide
                     additional information about an action. For example, the reason for
                     promoting a worker may be good performance or seniority. This topic
                     shows how to load action reasons using HCM Data Loader.
                  </p>
                  
                  
                  
                  <div class="sect2" id="FAIHM2254567"><h3 class="OracleScenario">Creating Action Reasons</h3>
                     <p>This example ActionReasons.dat file creates two action
                        reasons. The action reasons are identified by source keys.
                     </p><pre><code>METADATA|ActionReasons|SourceSystemOwner|SourceSystemId|ActionReasonCode|ActionReason|StartDate|EndDate
MERGE|ActionReasons|VISION|AR_VISION_PERF|VISION_PERF|Performance|2000/01/01|4712/12/31
MERGE|ActionReasons|VISION|AR_VISION_TXFR|VISION_TXFR|Internal Transfer|2000/01/01|<br></code></pre></div>
                  
                  <div class="sect2" id="FAIHM2254582"><h3 class="OracleScenario">Loading Translated Action-Reason Names</h3>
                     <p>Supply action-reason names in the language of the
                        user who's loading them. You supply an ActionReasonsTranslation.dat
                        file to translate action-reason names into other enabled languages
                        once the action reasons exist. This example translates the names of
                        existing action reasons. The action reasons are identified by their
                        source keys.
                     </p><pre><code>METADATA|ActionReasonsTranslation|SourceSystemOwner|SourceSystemId|ActionReason|Language
MERGE|ActionReasonsTranslation|VISION|AR_VISION_PERF|Accomplissement|FR
MERGE|ActionReasonsTranslation|VISION|AR_VISION_TXFR|Transfert interne|FR<br></code></pre></div>
                  
                  <div class="sect2" id="FAIHM2254585"><h3 class="OracleScenario">Deleting Action Reasons</h3>
                     <p>You can delete action reasons using HCM Data Loader.
                        This example ActionReasons.dat file deletes two action reasons. It
                        identifies the action reasons using source keys.
                     </p><pre><code>METADATA|ActionReasons|SourceSystemOwner|SourceSystemId
DELETE|ActionReasons|VISION|AR_VISION_PERF
DELETE|ActionReasons|VISION|AR_VISION_TXFR<br></code></pre></div>
                  
                  
                  
               </div>
               
               <div class="sect1" id="FAIHM2345851">
                  <h2>Loading Banks: Explained</h2>
                  
                  
                  
                  
                  
                  <p>A bank is a financial institution that can
                     have multiple branches. External bank accounts are associated with
                     bank branches. Bank, bank branch, and external bank account are business
                     objects whose details are stored in non-HCM tables. However, you can
                     load them using HCM Data Loader. This topic describes aspects of the
                     bank object that you must understand to load banks successfully.
                  </p>
                  
                  
                  <div class="sect2" id="FAIHM2345850">
                     <h3 class="topictitle">Loading Banks</h3>
                     
                     <p>You load bank data in a Bank.dat file for processing
                        by HCM Data Loader. To provide a unique reference to a bank when you
                        create it, you must supply either the <span class="uicontrol">Bank
                           Name</span> or the <span class="uicontrol">Bank Number</span> attribute. You must also supply the <span class="uicontrol">Country
                           Code</span> attribute.
                     </p>
                     
                     
                     <p>This example Bank.dat file creates a bank record
                        using the <span class="uicontrol">Bank Name</span> and <span class="uicontrol">Country Code</span> user keys. It also supplies
                        the <span class="uicontrol">Bank Number</span> attribute.
                     </p>
                     <pre><code>METADATA|Bank|BankName|BankNumber|CountryCode
MERGE|Bank|Vision Bank|100001A|CA<br></code></pre>
                     
                     </div>
                  
                  <div class="sect2" id="FAIHM2345883">
                     <h3 class="topictitle">Deleting Banks</h3>
                     
                     <p>You can't delete bank objects using HCM Data Loader.
                        However, you can inactivate banks that are either no longer required
                        or were entered in error. This feature, which isn't available on the
                        Manage Banks pages, enables you to maintain an audit trail.
                     </p>
                     
                     
                     <p>This example Bank.dat file provides an end date for
                        a bank record to inactivate it. To identify an existing bank uniquely,
                        you can use the <span class="uicontrol">Country Code</span> and
                        either the <span class="uicontrol">Bank Name</span> or the <span class="uicontrol">Bank Number</span>.
                     </p>
                     <pre><code>METADATA|Bank|BankNumber|CountryCode|EndDate
MERGE|Bank|100001A|CA|2016/03/01<br></code></pre>
                     
                     </div>
                  
                  
                  
               </div>
               
               <div class="sect1" id="FAIHM2348008">
                  <h2>Loading Bank Branches: Explained</h2>
                  
                  
                  
                  
                  
                  <p>A bank is a financial institution that can
                     have multiple branches. External bank accounts are associated with
                     bank branches. Bank, bank branch, and external bank account are business
                     objects whose details are stored in non-HCM tables. However, you can
                     load them using HCM Data Loader. This topic describes aspects of the
                     bank branch object that you must understand to load bank branches
                     successfully.
                  </p>
                  
                  
                  <div class="sect2" id="FAIHM2348006">
                     <h3 class="topictitle">Loading Bank Branches</h3>
                     
                     <p>Bank branch data must be supplied in a BankBranch.dat
                        file for processing by HCM Data Loader. The <span class="uicontrol">Bank Branch Number</span> attribute, for which the field name
                        on the Manage Bank Branches page varies by country, uniquely identifies
                        the bank branch. It may be a required attribute, depending on country-specific
                        validations.
                     </p>
                     
                     
                     <p>You must supply one of the following combinations
                        of attributes to provide a unique reference to the bank branch and
                        the associated bank:
                     </p>
                     
                     <ul>
                        
                        <li>
                           <p><span class="uicontrol">Bank Branch
                                 Name</span>, <span class="uicontrol">Country Code</span>, and either <span class="uicontrol">Bank Name</span> or <span class="uicontrol">Bank Number</span></p>
                        </li>
                        
                        <li>
                           <p><span class="uicontrol">Bank Branch
                                 Number</span>, <span class="uicontrol">Country Code</span>, and either <span class="uicontrol">Bank Name</span> or <span class="uicontrol">Bank Number</span> 
                           </p>
                        </li>
                        
                     </ul>
                     
                     <p>This example BankBranch.dat file creates a bank branch
                        using the <span class="uicontrol">Bank Branch Number</span>, <span class="uicontrol">Bank Name</span>, and <span class="uicontrol">Country Code</span> user keys.
                     </p>
                     <pre><code>METADATA|BankBranch|BankBranchNumber|BankBranchName|BankName|CountryCode|EftSwiftCode
MERGE|BankBranch|111111A|Toronto 3|Vision Bank|CA|12345678<br></code></pre>
                     
                     </div>
                  
                  <div class="sect2" id="FAIHM2348007">
                     <h3 class="topictitle">Deleting Bank Branches</h3>
                     
                     <p>You can't delete bank branches using HCM Data Loader.
                        However, you can inactivate bank branches that are no longer required
                        or were entered in error. This feature, which isn't available on the
                        Manage Bank Branches pages, enables you to maintain an audit trail. 
                     </p>
                     
                     
                     <p>This example BankBranch.dat file provides an end
                        date to inactivate a bank branch.
                     </p>
                     <pre><code>METADATA|BankBranch|BankBranchNumber|BankName|CountryCode|EndDate
MERGE|BankBranch|111111A|Vision Bank|CA|2015/04/01<br></code></pre>
                     
                     </div>
                  
                  
                  
               </div>
               
               <div class="sect1" id="FAIHM2417253">
                  <h2>Loading External Bank Accounts: Explained</h2>
                  
                  
                  
                  
                  
                  <p>An external bank account record holds the
                     details of a bank account at a bank branch. Bank accounts are used
                     by payment methods to make payments to a person. Bank, bank branch,
                     and external bank account are business objects whose details are stored
                     in non-HCM tables. However, you can load them using HCM Data Loader.
                     This topic describes aspects of the external bank account object that
                     you must understand to load external bank accounts successfully.
                  </p>
                  
                  
                  <div class="sect2" id="FAIHM2417251">
                     <h3 class="topictitle">Bank and Bank Branch</h3>
                     
                     <p>Before you can create an external bank account, you
                        must create both the bank and the bank branch where the bank account
                        is held. 
                     </p>
                     
                  </div>
                  
                  <div class="sect2" id="FAIHM2417252">
                     <h3 class="topictitle">Loading External Bank Accounts</h3>
                     
                     <p>You supply external bank account data in the ExternalBankAccount.dat
                        file for processing by HCM Data Loader. You must supply a unique reference
                        to the external bank account using one of the following combinations
                        of attributes:
                     </p>
                     
                     
                     <ul>
                        
                        <li>
                           <p><span class="uicontrol">Account
                                 Number</span>, <span class="uicontrol">Country Code</span>, <span class="uicontrol">Currency Code</span>, <span class="uicontrol">Bank Name</span>, and either <span class="uicontrol">Bank Branch Name</span> or <span class="uicontrol">Bank Branch
                                 Number</span></p>
                        </li>
                        
                        <li>
                           <p><span class="uicontrol">Account
                                 Number</span>, <span class="uicontrol">Country Code</span>, <span class="uicontrol">Currency Code</span>, <span class="uicontrol">Bank Number</span>, and either <span class="uicontrol">Bank Branch Name</span> or <span class="uicontrol">Bank Branch Number</span></p>
                        </li>
                        
                     </ul>
                     
                     <p>The external bank account owner component identifies
                        a person to whom the account belongs. A bank account can be associated
                        with multiple owners, of whom one must be the primary owner. Use the
                        discriminator ExternalBankAccountOwner to load external bank account
                        owner components. Set the <span class="uicontrol">PrimaryFlag</span> attribute of the relevant component to <span class="uicontrol">Y</span> to identify the primary owner. You must supply a unique
                        reference to the external bank account owner using one of the following
                        combinations of attributes:
                     </p>
                     
                     <ul>
                        
                        <li>
                           <p><span class="uicontrol">Account
                                 Number</span>, <span class="uicontrol">Person Number</span>, <span class="uicontrol">Country Code</span>, <span class="uicontrol">Currency Code</span>, <span class="uicontrol">Bank Name</span>, and either <span class="uicontrol">Bank Branch
                                 Name</span> or <span class="uicontrol">Bank Branch Number</span></p>
                        </li>
                        
                        <li>
                           <p><span class="uicontrol">Account
                                 Number</span>, <span class="uicontrol">Person Number</span>, <span class="uicontrol">Country Code</span>, <span class="uicontrol">Currency Code</span>, <span class="uicontrol">Bank Number</span>, and either <span class="uicontrol">Bank
                                 Branch Name</span> or <span class="uicontrol">Bank Branch Number</span></p>
                        </li>
                        
                     </ul>
                     
                     <p>This example ExternalBankAccount.dat file creates
                        an external bank account and associates it with two owners, one of
                        whom is the primary owner.
                     </p>
                     <pre><code>METADATA|ExternalBankAccount|BankNumber|BankBranchNumber|CountryCode|AccountNumber|IBAN|AccountName|AccountType|CurrencyCode
MERGE|ExternalBankAccount|100001A|111111A|CA|12345678|CA23 ANBK 3350 1234 5678 20|J and P Smith||USD
METADATA|ExternalBankAccountOwner|BankNumber|BankBranchNumber|CountryCode|AccountNumber|CurrencyCode|PersonNumber|PrimaryFlag
MERGE|ExternalBankAccountOwner|100001A|111111A|CA|12345678|USD|121011|Y
MERGE|ExternalBankAccountOwner|100001A|111111A|CA|12345678|USD|126231|N<br></code></pre>
                     
                     </div>
                  
                  <div class="sect2" id="FAIHM2417276">
                     <h3 class="topictitle">Deleting External Bank Accounts</h3>
                     
                     <p>You can't delete an external bank account record
                        using HCM Data Loader. However, you can make the bank account inactive.
                        This example ExternalBankAccount.dat file makes an external bank account
                        inactive by including the <span class="uicontrol">InactiveFlag</span> attribute and setting it to <span class="uicontrol">Y</span>.
                     </p>
                     
                     <pre><code>METADATA|ExternalBankAccount|BankNumber|BranchNumber|CountryCode|CurrencyCode|AccountNumber|InactiveFlag
MERGE|ExternalBankAccount|100001A|111111A|CA|USD|12345678|Y<br></code></pre>
                     
                     </div>
                  
                  
                  
               </div>
               
               <div class="sect1" id="FAIHM2260556">
                  <h2>Loading Calendar Events: Explained</h2>
                  
                  
                  
                  
                  
                  <p>A calendar event is an event, such as a public
                     holiday or plant closure, on which working time may be affected. Calendar
                     events are optional. You specify the geographical or organizational
                     hierarchy to which workers affected by the calendar event must belong.
                     The hierarchy must exist before you load the associated calendar events.
                     This topic describes aspects of calendar events that you must understand
                     to load them successfully using HCM Data Loader. It also provides
                     examples showing how to load calendar events.
                  </p>
                  
                  
                  <div class="sect2" id="FAIHM2260555">
                     <h3 class="topictitle">Calendar Event Lookup Categories</h3>
                     
                     <p>Calendar events have categories, which are defined
                        in the PER_CAL_EVENT_CATEGORY lookup type. This lookup type has
                        one delivered value, PH, for public holidays. If you use additional
                        categories, then you must define them before you load calendar events.
                        Use the Manage Availability Lookups task in the Setup and Maintenance
                        work area.
                     </p>
                     
                  </div>
                  
                  <div class="sect2" id="FAIHM2260578">
                     <h3 class="topictitle">Calendar Event Coverage</h3>
                     
                     <p>The Calendar Event Coverage component identifies
                        the branch of the geographical or organizational hierarchy to which
                        the associated calendar event applies. You identify the top node of
                        the hierarchy branch. The event applies to that node and its child
                        nodes. You can also:
                     </p>
                     
                     
                     <ul>
                        
                        <li>
                           <p>Exclude from the coverage individual
                              nodes that appear in the specified hierarchy branch.
                           </p>
                        </li>
                        
                        <li>
                           <p>Override the calendar event name
                              and its category for individual nodes in the hierarchy.
                           </p>
                        </li>
                        
                     </ul>
                     
                     <p>In a geographical hierarchy, the calendar event applies
                        to all workers with assignments in the locations that you include in the calendar event coverage.
                        In an organizational hierarchy, the calendar event applies to all
                        workers with assignments in the departments that you include in the
                        calendar event coverage. The affected workers may also have work schedules
                        assigned to them. In this case, the event applies to the workers only
                        if you add it as a resource exception to the work schedule or work
                        schedule assignment.
                     </p>
                     
                     
                  </div>
                  
                  <div class="sect2" id="FAIHM2260579">
                     <h3 class="topictitle">Creating Calendar Events</h3>
                     
                     <p>This example CalendarEvent.dat file creates both
                        a public holiday for Christmas Day and a half-day event for elapsed
                        work schedules. It identifies the calendar events by their source
                        keys.
                     </p>
                     
                     <pre><code>METADATA|CalendarEvent|Name|Description|Category|CoverageType|ShortCode|StartDateTime|EndDateTime|TreeCode|TreeStructureCode|TreeVersionName|HalfDayForElapsed
MERGE|CalendarEvent|CPTAS6||PH|G|TAS6|2017/07/11 08:00:00|2017/07/11 12:30:00|WFMTL_Global|PER_GEO_TREE_STRUCTURE|WFMTL Bank Geography Version 1|Y
MERGE|CalendarEvent|Christmas Day 2017||PH|G|XMAS2017|2017/12/25 08:00:00|2017/12/25 18:00:00|WFMTL_Global|PER_GEO_TREE_STRUCTURE|WFMTL Bank Geography Version 1|N
METADATA|CalendarEventCoverage|ShortCode|CoverageScope|TerritoryCode|TreeStructureCode|TreeCode|TreeVersionName
MERGE|CalendarEventCoverage|TAS6|I|US|PER_GEO_TREE_STRUCTURE|WFMTL_Global|WFMTL Bank Geography Version 1
MERGE|CalendarEventCoverage|XMAS2017|I|US|PER_GEO_TREE_STRUCTURE|WFMTL_Global|WFMTL Bank Geography Version 1<br></code></pre>
                     
                     </div>
                  
                  <div class="sect2" id="FAIHM2260580">
                     <h3 class="topictitle">Deleting Calendar Events</h3>
                     
                     <p>You can delete a calendar event unless it's assigned
                        to a work schedule. This example CalendarEvent.dat file deletes a
                        calendar event. It identifies the calendar event by its source key.
                     </p>
                     
                     <pre><code>METADATA|CalendarEvent|SourceSystemOwner|SourceSystemId
DELETE|CalendarEvent|VISION|XMAS2017<br></code></pre>
                     
                     </div>
                  
                  
                  
               </div>
               
               <div class="sect1" id="FAIHM2370745">
                  <h2>Loading Checklist Templates: Explained</h2>
                  
                  
                  
                  
                  
                  <p>You use a checklist template to define a
                     sequence of related tasks with multiple performers, such as those
                     for onboarding a new worker. For example, you can create a checklist
                     template for new hires, with tasks for providing system access, issuing
                     badges, allocating parking space, and so on. This topic describes
                     how to create and maintain Checklist Template objects and the associated
                     Checklist Template Task components using HCM Data Loader.
                  </p>
                  
                  
                  <div class="sect2" id="FAIHM2370743">
                     <h3 class="topictitle">Checklist Categories and Task Names</h3>
                     
                     <p>You supply Checklist Template and Checklist Template
                        Task components in a Checklist.dat file. The checklist task names
                        must be unique for the checklist. The checklist category must exist
                        in the CHECKLIST_CATEGORY lookup for the target environment. Use the
                        Manage Checklist Lookups task in the Setup and Maintenance work area.
                        The combination of checklist name and checklist category must be unique.
                     </p>
                     
                  </div>
                  <div class="sect2" id="FAIHM2370744">
                     <h3 class="topictitle">Checklist Actions, Areas of Responsibility, and
                     Eligibility Profiles</h3>
                     
                     <p>If you plan to use actions in the checklist template,
                        then those actions must exist in the target environment.
                     </p>
                     
                     
                     <p>If you plan to use areas of responsibility to identify
                        task performers, then responsibility types must exist in the PER_RESPONSIBILITY_TYPES
                        lookup in the target environment. Alternatively, you can use one of
                        the values shown in this table.
                     </p>
                     
                     <div class="simpletable-margin">
                        <table class="customlayout" summary="">
                           
                           
                           <tr class="header">
                              
                              <th scope="col">
                                 Value
                                 
                              </th>
                              
                              <th scope="col">
                                 Meaning
                                 
                              </th>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>ORA_LN_MGR</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Line manager</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>ORA_WORKER</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Worker</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>ORA_INITIATOR</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Initiator</p>
                                 
                              </td>
                              
                           </tr>
                           
                           
                           
                        </table>
                     </div>
                     <p></p>
                     
                     <p>The default performer is the line manager.</p>
                     
                     <p>If you plan to use eligibility profiles in the
                        checklist tasks, then those eligibility profiles must exist in the
                        target environment.
                     </p>
                     
                  </div>
                  <div class="sect2" id="FAIHM2370760">
                     <h3 class="topictitle">Loading Translated Checklist Values</h3>
                     
                     <p>You can translate:</p>
                     
                     
                     <ul>
                        
                        <li>
                           <p>The checklist template name and
                              description
                           </p>
                        </li>
                        
                        <li>
                           <p>Checklist task names, descriptions,
                              and action URLs
                           </p>
                        </li>
                        
                     </ul>
                     
                     <p>Supply these values in the language of the user who's
                        loading them. You supply ChecklistTranslation.dat and ChecklistTaskTranslation.dat
                        files to translate these values into other enabled languages once
                        the checklists and tasks exist. 
                     </p>
                     
                  </div>
                  <div class="sect2" id="FAIHM2370761">
                     <h3 class="topictitle">Deleting Checklist Templates</h3>
                     
                     <p>You can delete Checklist Template and Checklist Template
                        Task components using HCM Data Loader.
                     </p>
                     
                  </div>
                  
               </div>
               
               <div class="sect1" id="FAIHM2521652">
                  <h2>Loading Document Types: Explained</h2>
                  
                  
                  
                  
                  
                  <p>A document type, such as Performance
                     Improvement Plan or Letter of Recognition, defines the purpose and
                     treatment of documents of that type. When defining a document type,
                     you include attributes, such as the document name, dates, and issuing
                     authority, and specify whether they're required. You can also specify
                     an expiration notification period, indicate whether approvals are
                     required, and enable multiple occurrences of the document. This topic
                     describes aspects of the Document Type object that you must understand
                     to load document types successfully using HCM Data Loader.
                  </p>
                  
                  
                  <div class="sect2" id="FAIHM2521651">
                     <h3 class="topictitle">Document Categories and Subcategories</h3>
                     
                     <p>Document types belong to a document category and may also
                        belong to a document subcategory. Document categories, such as Expenses
                        or Payroll, provide a way to group document types for ease of retrieval
                        and management. Document subcategories, such as Involuntary Deduction
                        or Additional Income in the Payroll category, provide a further level
                        of detail. 
                     </p>
                     
                     
                     <p>Before loading document types, ensure that referenced
                        document categories and subcategories exist in the target environment.
                        To create document categories, use the Manage Document Lookups task.
                        To create document subcategories, use the Manage Extended Lookup Codes
                        task. Perform both tasks in the Setup and Maintenance work area.
                     </p>
                     
                     
                  </div>
                  
                  <div class="sect2" id="FAIHM2521666">
                     <h3 class="topictitle">Document Types</h3>
                     
                     <p>When loading document types, you must provide a unique
                        reference for the record being created. If your document type isn't
                        country-specific, then you must supply a source key. This rule exists
                        because the <span class="uicontrol">Country</span> attribute
                        forms part of the user key. 
                     </p>
                     
                     
                     <p>If you're loading a Document Type Delivery Preference
                        component, then set the <span class="uicontrol">Hierarchy Code</span> attribute of the Document Type component to either <span class="uicontrol">GENERAL</span> or <span class="uicontrol">PAYROLL</span>. If you omit this attribute or provide no value, then document delivery
                        preferences aren't enabled for the document type.
                     </p>
                     
                     
                  </div>
                  
                  <div class="sect2" id="FAIHM2521673">
                     <h3 class="topictitle">Document Type Delivery Preferences</h3>
                     
                     <p>The Document Type Delivery Preference component enables
                        users to specify delivery preferences for documents of the associated
                        type. For example, you could enable users to specify that payslips
                        can be delivered both on paper and online. 
                     </p>
                     
                     
                     <p>The delivery preferences for the document type can
                        be overridden. That is, you can specify document delivery preferences:
                     </p>
                     
                     <ul>
                        
                        <li>
                           <p>At the payroll statutory unit level, for documents in the PAYROLL category</p>
                        </li>
                        
                        <li>
                           <p>At the legal employer level, for documents
                              in all other categories
                           </p>
                        </li>
                        
                     </ul>
                     
                     <p>In both cases, delivery preferences can be further
                        overridden at department and location levels.
                     </p>
                     
                     
                     
                     
                     <p>This figure summarizes the override hierarchy
                        for document delivery preferences. Entries at any level of the hierarchy
                        override those above them.
                     </p>
                     <img src="img/HRC_HDL_DOCTYPES_HIER_01_20061572.png" alt="Document type appears at the top of the hierarchy.&#xA;Both legal employer and payroll statutory unit appear at the second&#xA;level of the hierarchy. Department appears at the third level of the&#xA;hierarchy. Location appears at the fourth level of the hierarchy." class="fusappimg">
                     
                     
                     
                     <p>If you set the <span class="uicontrol">Allow Worker
                           Override</span> attribute to <span class="uicontrol">Y</span>, then workers can specify document delivery preferences for themselves.
                        Worker preferences override preferences at all other levels.
                     </p>
                     
                     
                  </div>
                  
                  
                  <p class="relatedlinks">Related Topics</p>
                  <ul>
                     <li>
                        <p><a href="https://fusionhelp.oracle.com/helpPortal/faces/AtkHelpPortalMain?TopicId=B352440A85ED7375E040D30A6881490B">Document Delivery Preferences: Explained</a></p>
                     </li>
                     <li>
                        <p><a href="https://fusionhelp.oracle.com/helpPortal/faces/AtkHelpPortalMain?TopicId=84A7F380E2A350FDE040D30A688155A2">Document Types and Categories: Explained</a></p>
                     </li>
                  </ul>
                  
               </div>
               
               <div class="sect1" id="FAIHM2520926">
                  <h2>Loading Document Types: Examples</h2>
                  
                  
                  
                  
                  
                  
                  <p>This topic provides examples showing how
                     to load and manage Document Type objects using HCM Data Loader.
                  </p>
                  
                  
                  
                  <div class="sect2" id="FAIHM2520918"><h3 class="OracleScenario">Creating Document Types Using Source Keys</h3>
                     <p>This example DocumentType.dat file creates one global
                        and one country-specific document type. The document types are identified using source
                        keys.
                     </p><pre><code>METADATA|DocumentType|SourceSystemOwner|SourceSystemId|DocumentType|Description| LegislationCode|CategoryCode|AuthorizationRequiredFlag|MultipleOccurencesFlag|ActiveInactiveFlag|PublishRequiredFlag|HierarchyCode|DocumentNameRequired|DocumentNumberRequired|DateFromRequired|DateToRequired|IssuingCountryRequired|IssuingLocationRequired|IssuingAuthorityRequired|IssuedDateRequired|CommentsRequired
MERGE|DocumentType|VISION|DTYPETest001|RS Global DocType1|RS Global DocType1 Description||PAYROLL|Y|Y|N|Y|GENERAL|R|R|Y|Y|Y|Y|Y|Y|Y
MERGE|DocumentType|VISION|DTYPETest003|RS US DocType1|RS US DocType1 Description|US|AUDIT|Y|Y|N|Y|PAYROLL|R|R|Y|Y|Y|Y|Y|Y|Y<br></code></pre></div>
                  
                  <div class="sect2" id="FAIHM2520950"><h3 class="OracleScenario">Creating Document Types Using User Keys</h3>
                     <p>This example DocumentType.dat file creates one country-specific
                        document type. The document type is identified using user keys. 
                     </p><pre><code>METADATA|DocumentType|DocumentType|Description|Country|CategoryCode|AuthorizationRequiredFlag|MultipleOccurencesFlag|ActiveInactiveFlag|PublishRequiredFlag|HierarchyCode|DocumentNameRequired|DocumentNumberRequired|DateFromRequired|DateToRequired|IssuingCountryRequired|IssuingLocationRequired|IssuingAuthorityRequired|IssuedDateRequired|CommentsRequired
MERGE|DocumentType|US Audit Doc Type|US Audit Doc Type Description|United States|AUDIT|Y|Y|Y|Y|PAYROLL|R|R|Y|Y|Y|Y|Y|Y|Y<br></code></pre><div class="infobox-"><span class="notep1">Note: </span>
                        If the document type were global, you would have
                        to provide a source key rather than a user key. This requirement exists
                        because <span class="uicontrol">Country</span> is a required
                        attribute of the user key.
                        
                     </div>
                  </div>
                  
                  <div class="sect2" id="FAIHM2520951"><h3 class="OracleScenario">Creating Document Types with Delivery Preferences</h3>
                     <p>This example DocumentType.dat file creates a country-specific
                        document type with delivery preferences for the document type, payroll statutory
                        unit, and department. The document type and delivery preferences
                        are identified using source keys.
                     </p><pre><code>METADATA|DocumentType|SourceSystemOwner|SourceSystemId|DocumentType|Description| LegislationCode|CategoryCode|AuthorizationRequiredFlag|MultipleOccurencesFlag|ActiveInactiveFlag|PublishRequiredFlag|HierarchyCode|DocumentNameRequired|DocumentNumberRequired|DateFromRequired|DateToRequired|IssuingCountryRequired|IssuingLocationRequired|IssuingAuthorityRequired|IssuedDateRequired|CommentsRequired
MERGE|DocumentType|VISION|DTYPETest003|RS US DocType1|RS US DocType1 Description|US|AUDIT|Y|Y|N|Y|PAYROLL|R|R|Y|Y|Y|Y|Y|Y|Y
METADATA|DeliveryPreference|SourceSystemOwner|SourceSystemId|DocumentTypeId(SourceSystemId)|InitialConsentValueFlag|OnlineConsentRequiredFlag|OnlineEnabledFlag|PaperEnabledFlag|AllowWorkerOverrideFlag|EmailEnabledFlag|LegislationCode|LevelCodeName|DocumentTypeCountry|DocumentTypeLegislationCode|PayrollStatutoryUnitName|DepartmentName
MERGE|DeliveryPreference|VISION|DTYPETest003_Pref0|DTYPETest003|N|N|Y|Y|N|N|US||US|US||
MERGE|DeliveryPreference|VISION|DTYPETest003_Pref1|DTYPETest003|N|N|Y|Y|N|N|US|Payroll Statutory Unit|US|US|GBI HCM Widgets USA|
MERGE|DeliveryPreference|VISION|DTYPETest003_Pref2|DTYPETest003|N|N|Y|Y|N|N|US|Department|US|US|GBI HCM Widgets USA|HCM-1001-Corporate<br></code></pre></div>
                  
                  <div class="sect2" id="FAIHM2520956"><h3 class="OracleScenario">Loading Translated Document Types and Descriptions</h3>
                     <p>This example DocumentTypeTranslation.dat file translates
                        an existing document type and its description. It identifies the document
                        type using source keys.
                     </p><pre><code>METADATA|DocumentTypeTranslation|SourceSystemOwner|SourceSystemId|BaseDocumentType|LegislationCode|SourceLang|Language|DocumentType|Description
MERGE|DocumentTypeTranslation|VISION|DTYPETest001|RS Global DocType1||US|JP|RS Global DocType1 JP|RS Global DocType1 DESC JP
MERGE|DocumentTypeTranslation|VISION|DTYPETest003|RS US DocType1|US|US|JP|RS US DocType1 JP|RS US DocType1 DESC JP<br></code></pre></div>
                  
                  <div class="sect2" id="FAIHM2520959"><h3 class="OracleScenario">Deleting Document Types</h3>
                     <p>You can delete a document type only if no document
                        records of that type exist. When you delete a document type, any associated
                        delivery preferences are also deleted. This example DocumentType.dat
                        file deletes a document type that is identified by its source key.
                     </p><pre><code>METADATA|DocumentType|SourceSystemOwner|SourceSystemId
DELETE|DocumentType|VISION|DTYPETest001
DELETE|DocumentType|VISION|DTYPETest003<br></code></pre><p>This example DocumentType.dat file deletes a document
                        type that is identified by its user key.
                     </p><pre><code>METADATA|DocumentType|DocumentType|Description|Country
DELETE|DocumentType|US Audit Doc Type|US Audit Doc Type Description|United States<br></code></pre></div>
                  
                  
                  
               </div>
               
               <div class="sect1" id="FAIHM2260150">
                  <h2>Loading Extended Lookup Codes: Examples</h2>
                  
                  
                  
                  
                  
                  
                  <p>You use extended lookup codes to provide
                     subcategories for lookup
                     codes. The associated lookup codes must already exist when
                     you load extended lookup codes using HCM Data Loader. If the lookup
                     codes are for specific legislations, then you can supply extended
                     lookup codes for those legislations only. For example, if a lookup
                     code has the +FR tag, then you can supply extended lookup codes for
                     the FR legislation code only. This topic provides examples showing
                     how to load extended lookup codes using HCM Data Loader.
                  </p>
                  
                  
                  
                  <div class="sect2" id="FAIHM2260142"><h3 class="OracleScenario">Creating Extended Lookup Codes</h3>
                     <p>This example ExtendedLookupCode.dat file creates
                        extended lookup codes for the CONTRACT_TYPE lookup type. It identifies
                        the extended lookup codes using source keys.
                     </p><pre><code>METADATA|ExtendedLookupCode|SourceSystemOwner|SourceSystemId|LookupType|LookupCode|LegislationCode|ExtendedLookupCode|ExtendedLookupCodeName
MERGE|ExtendedLookupCode|VISION|ELC_CONTRACT_LIMITED|CONTRACT_TYPE|5|NO|L|Limited Contract
MERGE|ExtendedLookupCode|VISION|ELC_CONTRACT_DIRECTOR|CONTRACT_TYPE|FR_CEO_MANDATE|FR|DC|Director Contract<br></code></pre></div>
                  
                  <div class="sect2" id="FAIHM2260155"><h3 class="OracleScenario">Loading Translated Extended Lookup Code Names</h3>
                     <p>Supply the names of extended lookup codes in the
                        language of the user who's loading them. You supply an ExtendedLookupCodeTranslation.dat
                        file to translate the names of extended lookup codes into other enabled
                        languages once the codes exist. This example translates the name of
                        an existing extended lookup code. It identifies the code by its source
                        key.
                     </p><pre><code>METADATA|ExtendedLookupCodeTranslation|SourceSystemOwner|SourceSystemId|Language|ExtendedLookupCodeName
MERGE|ExtendedLookupCodeTranslation|VISION|ELC_CONTRACT_LIMITED|FR|Contrat a Duree Limitee<br></code></pre></div>
                  
                  <div class="sect2" id="FAIHM2260158"><h3 class="OracleScenario">Deleting Extended Lookup Codes</h3>
                     <p>You can delete extended lookup codes using HCM Data
                        Loader. This example ExtendedLookupCode.dat file deletes specific
                        extended lookup codes for the CONTRACT_TYPE lookup code. It identifies
                        the extended lookup codes using source keys.
                     </p><pre><code>METADATA|ExtendedLookupCode|SourceSystemOwner|SourceSystemId
DELETE|ExtendedLookupCode|VISION|ELC_CONTRACT_LIMITED
DELETE|ExtendedLookupCode|VISION|ELC_CONTRACT_DIRECTOR<br></code></pre></div>
                  
                  
               </div>
               
               <div class="sect1" id="FAIHM2253438">
                  <h2>Loading Legislative Data Groups: Examples</h2>
                  
                  
                  
                  
                  
                  
                  <p>Legislative data groups are used to partition
                     payroll and related data. At least one legislative data group is required
                     for each country where the enterprise operates. Each legislative data
                     group holds a legislation code, currency, and cost allocation key
                     flexfield. It's also associated with one or more payroll statutory units. This topic provides examples showing how to load and manage legislative
                     data groups using HCM Data Loader.
                  </p>
                  
                  
                  
                  <div class="sect2" id="FAIHM2253427"><h3 class="OracleScenario">Creating Legislative Data Groups</h3>
                     <p>This example LegislativeDataGroup.dat file creates
                        a legislative data group for the United Kingdom. It identifies the
                        legislative data group using its source key. Codes are supplied for
                        the currency and legislation.
                     </p><pre><code>METADATA|LegislativeDataGroup|SourceSystemOwner|SourceSystemId|Name|LegislationCode|DefaultCurrencyCode
MERGE|LegislativeDataGroup|VISION|LDG_VI_UK|Vision UK|GB|GBP<br></code></pre><p>This example LegislativeDataGroup.dat file creates
                        a legislative data group for the United States and associates it with
                        a cost allocation key flexfield.
                     </p><pre><code>METADATA|LegislativeDataGroup|Name|Territory|DefaultCurrency|StructureInstanceName
MERGE|LegislativeDataGroup|Vision US|United States|US Dollar|System Test Costing<br></code></pre></div>
                  
                  <div class="sect2" id="FAIHM2253428"><h3 class="OracleScenario">Deleting Legislative Data Groups</h3>
                     <p>You can delete legislative data groups using HCM
                        Data Loader. This example LegislativeDataGroup.dat file deletes a
                        legislative data group. It identifies the legislative data group by
                        its source key.
                     </p><pre><code>METADATA|LegislativeDataGroup|SourceSystemOwner|SourceSystemId
DELETE|LegislativeDataGroup|VISION|LDG_VI_UK<br></code></pre></div>
                  
                  
               </div>
               
               <div class="sect1" id="FAIHM2254076">
                  <h2>Loading Name Formats: Explained</h2>
                  
                  
                  
                  
                  
                  <p>A name format is a set of rules for combining
                     individual name components, such as first name and last name, to form
                     a complete person name. Name formats are specific to a legislation
                     and name-format type. The name-format types are display name, list
                     name, order name, and full name. The predefined global format is used
                     when no format exists for a format type and legislation. This topic
                     describes how to load name formats using HCM Data Loader.
                  </p>
                  
                  
                  <div class="sect2" id="FAIHM2254075">
                     <h3 class="topictitle">Understanding Format Masks</h3>
                     
                     <p>A format mask is a string of codes used to construct
                        a name format. The codes represent the required name components, symbols,
                        and special characters. Use the following codes to identify the name
                        components:
                     </p>
                     
                     
                     <div class="simpletable-margin">
                        <table class="customlayout" summary="">
                           
                           
                           <tr class="header">
                              
                              <th scope="col">
                                 Code
                                 
                              </th>
                              
                              <th scope="col">
                                 Name Component
                                 
                              </th>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$FIR$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>First Name</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$LAS$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Last Name</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$MID$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Middle Name</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$PLN$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Previous Last Name</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$KNA$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Known As</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$HNS$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Honors</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$PNA$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Prefix</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$SUF$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Suffix</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$TIT$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Title</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$MLR$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Military Rank</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$INF1$</code> through <code>$INF30$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>Name Information 1 through Name Information 30 </p>
                                 
                              </td>
                              
                           </tr>
                           
                           
                           
                        </table>
                     </div>
                     <p></p>
                     
                     <p>Use these codes for symbols and special characters:</p>
                     
                     <div class="simpletable-margin">
                        <table class="customlayout" summary="">
                           
                           
                           <tr class="header">
                              
                              <th scope="col">
                                 Code
                                 
                              </th>
                              
                              <th scope="col">
                                 Description
                                 
                              </th>
                              
                              <th scope="col">
                                 Value
                                 
                              </th>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$SPA$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>space</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p> </p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$COM$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>comma</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>,</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$OPE$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>left parenthesis</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>(</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$CLO$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>right parenthesis</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>)</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$QUO$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>quotation mark</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>"</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$DOT$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>period</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>.</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$SLA$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>slash</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>/</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$COL$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>colon</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>:</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$SEM$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>semicolon</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>;</p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p><code>$ATT$</code></p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p>at sign</p>
                                 
                              </td>
                              
                              <td>
                                 
                                 <p>@</p>
                                 
                              </td>
                              
                           </tr>
                           
                           
                           
                        </table>
                     </div>
                     <p></p>
                     
                     
                  </div>
                  
                  <div class="sect2" id="FAIHM2254240">
                     <h3 class="topictitle">Constructing a Format Mask</h3>
                     
                     <p>The format mask must:</p>
                     
                     
                     <ul>
                        
                        <li>
                           <p>Start and end with a vertical bar
                              (|).
                           </p>
                        </li>
                        
                        <li>
                           <p>Separate each name component with
                              two vertical bars (||).
                           </p>
                        </li>
                        
                     </ul>
                     
                     <p>The vertical bar is the default delimiter for HCM
                        Data Loader .dat files. If you haven't selected a different default
                        delimiter, then you must prefix the vertical bar in the name-format
                        mask with the HCM Data Loader escape character. The escape character
                        ensures that HCM Data Loader ignores delimiters in the format mask.
                        The default escape character is the backslash (\). For example, to
                        provide a format mask for the name format <code>Title
                           Last Name, First Name (Known As)</code>, you supply the codes for
                        each element of the name as follows:
                     </p>
                     
                     <div class="simpletable-margin">
                        <table class="customlayout" summary="">
                           
                           
                           <tr class="header">
                              
                              <th scope="col">
                                 Element
                                 
                              </th>
                              
                              <th scope="col">
                                 Codes
                                 
                              </th>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Title space</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p><code>$TIT$$SPA$</code></p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>Last Name, space</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p><code>$LAS$$COM$$SPA$</code></p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>First Name space</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p><code>$FIR$$SPA$</code></p>
                                 
                              </td>
                              
                           </tr>
                           
                           <tr>
                              
                              <th scope="row" class="row">
                                 
                                 <p>(Known As)</p>
                                 
                              </th>
                              
                              <td>
                                 
                                 <p><code>$OPE$$KNA$$CLO$</code></p>
                                 
                              </td>
                              
                           </tr>
                           
                           
                           
                        </table>
                     </div>
                     <p></p>
                     
                     <p>In the format mask, each name component must be delimited
                        by two vertical bars:
                     </p>
                     <pre><code>$TIT$$SPA$\|\|$LAS$$COM$$SPA$\|\|$FIR$$SPA$\|\|$OPE$$KNA$$CLO$<br></code></pre>
                     <p>In addition, the format mask must start and end with
                        a single vertical bar:
                     </p>
                     <pre><code>\|$TIT$$SPA$\|\|$LAS$$COM$$SPA$\|\|$FIR$$SPA$\|\|$OPE$$KNA$$CLO$\|<br></code></pre>
                     
                     </div>
                  
                  <div class="sect2" id="FAIHM2254347">
                     <h3 class="topictitle">Creating Name Formats</h3>
                     
                     <p>This example NameFormat.dat file creates a display
                        name for France in the format <code>Title First Name
                           Last Name</code>. The name format is identified by its source key.
                     </p>
                     
                     <pre><code>METADATA|NameFormat|SourceSystemOwner|SourceSystemId|FormatName|LegislationCode|UserFormatChoice|FormatMask
MERGE|NameFormat|VISION|NF_FR_L_DISP|DISPLAY_NAME|FR|L|\|$TIT$$SPA$\|\|$FIR$$SPA$\|\|$LAS$\|<br></code></pre>
                     
                     </div>
                  
                  <div class="sect2" id="FAIHM2254352">
                     <h3 class="topictitle">Deleting Name Formats</h3>
                     
                     <p>You can delete a name format using HCM Data Loader,
                        provided that the name format isn't being used. This example NameFormat.dat
                        file deletes a name format. It identifies the name format by its source
                        key.
                     </p>
                     
                     <pre><code>METADATA|NameFormat|SourceSystemOwner|SourceSystemId
DELETE|NameFormat|VISION|NF_FR_L_DISP<br></code></pre>
                     
                     </div>
                  
                  
               </div>
               
               <div class="sect1" id="FAIHM2253359">
                  <h2>Loading Person Types: Examples</h2>
                  
                  
                  
                  
                  
                  
                  <p>System person types are predefined values
                     that identify groups such as employees and contingent workers. You
                     can't create, edit, or delete system person types. However, each system
                     person type is associated with one or more user person types, which
                     further categorize the group. You can create, edit, and delete user
                     person types. For example, you could define Associate and Remote Worker
                     as user person types of the Employee system person type. For any system
                     person type, one user person type must be identified as the default
                     value. This topic provides examples showing how to load and manage
                     user person types using HCM Data Loader.
                  </p>
                  
                  
                  
                  <div class="sect2" id="FAIHM2253351"><h3 class="OracleScenario">Creating Person Types</h3>
                     <p>This example PersonType.dat file creates the Officer
                        and Rating user person types for the Employee system person type.
                        It identifies the person types using source keys.
                     </p><pre><code>METADATA|PersonType|SourceSystemOwner|SourceSystemId|SystemPersonType|UserPersonType|ActiveFlag|DefaultFlag
MERGE|PersonType|VISION|PT_EMP_OFFICER|EMP|Officer|Y|N
MERGE|PersonType|VISION|PT_EMP_RATING|EMP|Rating|Y|N<br></code></pre></div>
                  
                  <div class="sect2" id="FAIHM2253369"><h3 class="OracleScenario">Loading Translated Person-Type Names</h3>
                     <p>Supply person-type names in the language of the user
                        who's loading them. You supply a PersonTypeTranslation.dat file to
                        translate person-type names into other enabled languages once the
                        person types exist. This example translates the name of an existing
                        person type. The person type is identified by its source key. 
                     </p><pre><code>METADATA|PersonTypeTranslation|SourceSystemOwner|SourceSystemId|Language|UserPersonType
MERGE|PersonTypeTranslation|VISION|PT_EMP_OFFICER|FR|Officier<br></code></pre></div>
                  
                  <div class="sect2" id="FAIHM2253370"><h3 class="OracleScenario">Deleting Person Types</h3>
                     <p>You can delete a person type using HCM Data Loader,
                        provided that the person type isn't being used. This example PersonType.dat
                        file deletes person types and any translated versions of the person-type
                        names. It identifies the person types by their source keys.
                     </p><pre><code>METADATA|PersonType|SourceSystemOwner|SourceSystemId
DELETE|PersonType|VISION|PT_EMP_OFFICER
DELETE|PersonType|VISION|PT_EMP_RATING<br></code></pre></div>
                  
                  
               </div>
               
               <div class="sect1" id="FAIHM2260002">
                  <h2>Loading Resource Exceptions: Examples</h2>
                  
                  
                  
                  
                  
                  
                  <p>A resource exception is a deviation in availability
                     from a work schedule or schedule assignment. The resource exception
                     defines when a resource is unavailable. For example, a worker may
                     be attending training and therefore unavailable between specified
                     dates. You create resource exceptions, which are optional, for specific
                     work schedules or schedule assignments. The work schedule or schedule
                     assignment must exist before you can create an associated resource
                     exception. This topic provides examples showing how to load resource
                     exceptions using HCM Data Loader.
                  </p>
                  
                  
                  
                  <div class="sect2" id="FAIHM2259994"><h3 class="OracleScenario">Creating Resource Exceptions</h3>
                     <p>This example ResourceException.dat file creates a
                        resource exception for a hospital appointment. It identifies the resource
                        exception by its source key.
                     </p><pre><code>METADATA|ResourceException|SourceSystemOwner|SourceSystemId|ExceptionName|StartDateTime|EndDateTime
MERGE|ResourceException|VISION|RE_VISION_HOSPITAL|Hospital Appointment|2015/08/15 08:00:00|2015/08/15 17:00:00<br></code></pre></div>
                  
                  <div class="sect2" id="FAIHM2260007"><h3 class="OracleScenario">Deleting Resource Exceptions</h3>
                     <p>You can delete a resource exception using HCM Data
                        Loader, provided that it's not referred to by a work schedule. This
                        example ResourceException.dat file deletes an unused resource exception.
                        It identifies the resource exception by its source key.
                     </p><pre><code>METADATA|ResourceException|SourceSystemOwner|SourceSystemId
DELETE|ResourceException|VISION|RE_VISION_HOSPITAL<br></code></pre></div>
                  
                  
               </div>
            </div>
         </div>
      </div>
      <footer></footer>
      <noscript>
         <p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
      </noscript>
      <!-- Start SiteCatalyst code -->
      <script type="application/javascript" src="//www.oracleimg.com/us/assets/metrics/ora_docs.js"></script>
      <!-- End SiteCatalyst code -->
      </body>
</html>
